// Generated by CoffeeScript 1.10.0
(function() {
  var calculateHeight, calculateWidth, stringifyAttribute, stringifyMethod, stringifyParameters, stringifyVisibility, textWidthDummy, uml,
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  window.DEBUG = true;

  window.App = {
    Configurators: {}
  };

  App.View = (function() {
    function View(umlClass, container) {
      this.umlClass = umlClass;
      this.container = container;
    }

    View.prototype.draw = function() {
      return this;
    };

    View.prototype.redraw = function(properties) {
      return this;
    };

    return View;

  })();

  App.UMLClass = (function() {
    function UMLClass(name, attributes, methods) {
      var ref, view;
      this.name = name;
      this.attributes = attributes;
      this.methods = methods;
      this.views = {
        "class": new App.UMLClassView(this, d3.select("svg")),
        edit: new App.UMLClassEditView(this)
      };
      ref = this.views;
      for (name in ref) {
        view = ref[name];
        view.draw();
      }
    }

    UMLClass.prototype.update = function(properties) {
      var key, name, ref, val, view;
      if (properties == null) {
        properties = {};
      }
      for (key in properties) {
        val = properties[key];
        this[key] = val;
      }
      ref = this.views;
      for (name in ref) {
        view = ref[name];
        view.redraw(properties);
      }
      return this;
    };

    return UMLClass;

  })();

  App.UMLClassView = (function(superClass) {
    extend(UMLClassView, superClass);

    function UMLClassView(umlClass, container) {
      UMLClassView.__super__.constructor.call(this, umlClass, container);
    }

    UMLClassView.prototype.draw = function() {
      var data, rectangleAttributes, rectangles;
      data = [
        {
          "rx": 110,
          "ry": 110,
          "height": 30,
          "width": 30,
          "color": "blue"
        }, {
          "rx": 160,
          "ry": 160,
          "height": 30,
          "width": 30,
          "color": "red"
        }
      ];
      rectangles = this.container.selectAll("rect").data(data).enter().append("rect");
      rectangleAttributes = rectangles.attr("x", function(d) {
        return d.rx;
      }).attr("y", function(d) {
        return d.ry;
      }).attr("height", function(d) {
        return d.height;
      }).attr("width", function(d) {
        return d.width;
      }).style("fill", function(d) {
        return d.color;
      });
      return this;
    };

    UMLClassView.prototype.redraw = function(properties) {
      return this;
    };

    return UMLClassView;

  })(App.View);

  App.UMLClassEditView = (function(superClass) {
    extend(UMLClassEditView, superClass);

    function UMLClassEditView(umlClass, container) {
      UMLClassEditView.__super__.constructor.call(this, umlClass, container);
    }

    UMLClassEditView.prototype.draw = function() {
      return this;
    };

    UMLClassEditView.prototype.redraw = function(properties) {
      return this;
    };

    return UMLClassEditView;

  })(App.View);

  uml = joint.shapes.uml;

  stringifyVisibility = function(visibilty) {
    var mapper;
    if (visibilty == null) {
      visibilty = "public";
    }
    mapper = {
      "public": "+",
      "protected": "#",
      "package": "~",
      "private": "-"
    };
    return mapper[visibilty.toLowerCase()];
  };

  stringifyParameters = function(parameters) {
    var param;
    if (!parameters || parameters.length === 0) {
      return "";
    }
    return ((function() {
      var i, len, results;
      results = [];
      for (i = 0, len = parameters.length; i < len; i++) {
        param = parameters[i];
        results.push(param.name + ": " + param.type);
      }
      return results;
    })()).join(", ");
  };

  stringifyAttribute = function(attribute) {
    return ((stringifyVisibility(attribute.visibilty)) + " " + attribute.name + ": " + attribute.type).trim();
  };

  stringifyMethod = function(method) {
    var suffix;
    if (method.type != null) {
      suffix = ": " + method.type;
    } else {
      suffix = "";
    }
    return ((stringifyVisibility(method.visibilty)) + " " + method.name + "(" + (stringifyParameters(method.parameters)) + ")" + suffix).trim();
  };

  calculateHeight = function(name, attributes, methods) {
    return (attributes.length + methods.length) * 14 + 35;
  };

  textWidthDummy = null;

  calculateWidth = function(name, stringifiedAttributes, stringifiedMethods, style) {
    var attribute, i, j, len, len1, maxWidth, method, width;
    if (style == null) {
      style = {
        "font-size": "12px",
        "font-family": "Times New Roman"
      };
    }
    style["position"] = "absolute";
    style["visibility"] = "hidden";
    if (textWidthDummy == null) {
      textWidthDummy = $("<div />");
      $(document.body).append(textWidthDummy);
    }
    textWidthDummy.css(style);
    maxWidth = 0;
    width = 0;
    textWidthDummy.text(name);
    if ((width = textWidthDummy.width()) > maxWidth) {
      maxWidth = width;
    }
    for (i = 0, len = stringifiedAttributes.length; i < len; i++) {
      attribute = stringifiedAttributes[i];
      textWidthDummy.text(attribute);
      if ((width = textWidthDummy.width()) > maxWidth) {
        maxWidth = width;
      }
    }
    for (j = 0, len1 = stringifiedMethods.length; j < len1; j++) {
      method = stringifiedMethods[j];
      textWidthDummy.text(method);
      if ((width = textWidthDummy.width()) > maxWidth) {
        maxWidth = width;
      }
    }
    return maxWidth + 10;
  };

  App.ShapeFactory = {
    Model: {
      "new": function(data, layout) {
        var attribute, attributes, h, method, methods, name, object, stringifiedAttributes, stringifiedMethods, w, x, y;
        name = data.name + " (Model)";
        attributes = data.attributes || [];
        methods = data.methods || [];
        stringifiedAttributes = (function() {
          var i, len, results;
          results = [];
          for (i = 0, len = attributes.length; i < len; i++) {
            attribute = attributes[i];
            results.push(stringifyAttribute(attribute));
          }
          return results;
        })();
        stringifiedMethods = (function() {
          var i, len, results;
          results = [];
          for (i = 0, len = methods.length; i < len; i++) {
            method = methods[i];
            results.push(stringifyMethod(method));
          }
          return results;
        })();
        x = layout.x || 10;
        y = layout.y || 10;
        w = layout.width || calculateWidth(name, stringifiedAttributes, stringifiedMethods);
        h = layout.height || calculateHeight(name, attributes, methods);
        object = new uml.Class({
          position: {
            x: x,
            y: y
          },
          size: {
            width: w,
            height: h
          },
          name: name,
          attributes: stringifiedAttributes,
          methods: stringifiedMethods
        });
        object.mvc = {
          name: name,
          attributes: stringifiedAttributes,
          methods: stringifiedMethods,
          type: "model"
        };
        return object;
      }
    },
    Controller: {
      "new": function(data, layout) {
        var attribute, attributes, h, method, methods, name, object, stringifiedAttributes, stringifiedMethods, w, x, y;
        name = data.name + " (Controller)";
        attributes = data.attributes || [];
        methods = data.methods || [];
        stringifiedAttributes = (function() {
          var i, len, results;
          results = [];
          for (i = 0, len = attributes.length; i < len; i++) {
            attribute = attributes[i];
            results.push(stringifyAttribute(attribute));
          }
          return results;
        })();
        stringifiedMethods = (function() {
          var i, len, results;
          results = [];
          for (i = 0, len = methods.length; i < len; i++) {
            method = methods[i];
            results.push(stringifyMethod(method));
          }
          return results;
        })();
        x = layout.x || 10;
        y = layout.y || 10;
        w = layout.width || calculateWidth(name, stringifiedAttributes, stringifiedMethods);
        h = layout.height || calculateHeight(name, attributes, methods);
        object = new uml.Class({
          position: {
            x: x,
            y: y
          },
          size: {
            width: w,
            height: h
          },
          name: name,
          attributes: stringifiedAttributes,
          methods: stringifiedMethods
        });
        object.mvc = {
          name: name,
          attributes: stringifiedAttributes,
          methods: stringifiedMethods,
          type: "controller"
        };
        return object;
      }
    },
    View: {
      "new": function(data, layout) {
        var attribute, attributes, h, method, methods, name, object, stringifiedAttributes, stringifiedMethods, w, x, y;
        name = data.name + " (View)";
        attributes = data.attributes || [];
        methods = data.methods || [];
        stringifiedAttributes = (function() {
          var i, len, results;
          results = [];
          for (i = 0, len = attributes.length; i < len; i++) {
            attribute = attributes[i];
            results.push(stringifyAttribute(attribute));
          }
          return results;
        })();
        stringifiedMethods = (function() {
          var i, len, results;
          results = [];
          for (i = 0, len = methods.length; i < len; i++) {
            method = methods[i];
            results.push(stringifyMethod(method));
          }
          return results;
        })();
        x = layout.x || 10;
        y = layout.y || 10;
        w = layout.width || calculateWidth(name, stringifiedAttributes, stringifiedMethods);
        h = layout.height || calculateHeight(name, attributes, methods);
        object = new uml.Class({
          position: {
            x: x,
            y: y
          },
          size: {
            width: w,
            height: h
          },
          name: name,
          attributes: stringifiedAttributes,
          methods: stringifiedMethods,
          type: "view"
        });
        object.mvc = {
          name: name,
          attributes: stringifiedAttributes,
          methods: stringifiedMethods,
          type: "view"
        };
        return object;
      }
    }
  };

  uml = joint.shapes.uml;

  App.LinkFactory = {
    "new": function(type, source, target) {
      if (source.mvc.type === "controller" || target.mvc.type === "controller") {
        return new uml[type]({
          source: {
            id: source.id
          },
          target: {
            id: target.id
          }
        });
      }
      throw new Error("LinkFactory.new: Cannot connect a " + source.mvc.type + " to a " + target.mvc.type);
    }
  };

}).call(this);
