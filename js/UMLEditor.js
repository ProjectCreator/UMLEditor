// Generated by CoffeeScript 1.10.0
(function() {
  var getTemplate,
    slice = [].slice,
    indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; },
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  window.DEBUG = true;

  window.App = {
    Algorithms: {},
    Connections: {},
    Templates: {}
  };

  String.prototype._idSafe = function() {
    return this.replace(/([\u0080-\uffff]|\s+)/g, "_");
  };

  String.prototype._idUnique = function() {
    var i, orig, str;
    orig = this;
    str = orig;
    i = 0;
    while (document.getElementById(str)) {
      str = orig + "-" + (i++);
    }
    return "" + str;
  };

  String.prototype._capitalize = function() {
    return this[0].toUpperCase() + this.slice(1);
  };

  String.prototype.contains = function(needle) {
    return this.indexOf(needle) >= 0;
  };

  Array.prototype.without = function(elem) {
    var e;
    return (function() {
      var k, len, results1;
      results1 = [];
      for (k = 0, len = this.length; k < len; k++) {
        e = this[k];
        if (e !== elem) {
          results1.push(e);
        }
      }
      return results1;
    }).call(this);
  };

  Array.prototype.remove = function(elem) {
    var idx;
    idx = this.indexOf(elem);
    if (idx >= 0) {
      this.splice(idx, 1);
    }
    return this;
  };

  Object.defineProperties(Array.prototype, {
    first: {
      get: function() {
        return this[0];
      },
      set: function(v) {
        this[0] = v;
        return this;
      }
    },
    second: {
      get: function() {
        return this[1];
      },
      set: function(v) {
        this[1] = v;
        return this;
      }
    },
    last: {
      get: function() {
        return this[this.length - 1];
      },
      set: function(v) {
        this[this.length - 1] = v;
        return this;
      }
    }
  });

  App.Templates.navbar = {
    template: "<nav class=\"navbar navbar-default\">\n    <div class=\"container-fluid\">\n        <div class=\"navbar-header\">\n            <a class=\"navbar-brand\" href=\"#\">UMLEditor</a>\n        </div>\n\n        <div class=\"collapse navbar-collapse\" id=\"bs-example-navbar-collapse-1\">\n            <ul class=\"nav navbar-nav\">\n                <li>\n                    <a href=\"#\">\n                        <span class=\"label label-primary label-lg newClass\">\n                            New class &nbsp;\n                            <span class=\"glyphicon glyphicon-plus\"></span>\n                        </span>\n                    </a>\n                </li>\n                <li>\n                    <a href=\"#\">\n                        <span class=\"label label-primary label-lg newConnection\">\n                            Connect classes &nbsp;\n                            <span class=\"glyphicon glyphicon-link\"></span>\n                        </span>\n                    </a>\n                </li>\n                <li>\n                    <a href=\"#\">\n                        <span class=\"label label-primary label-lg save\">\n                            Save &nbsp;\n                            <span class=\"glyphicon glyphicon-hdd\"></span>\n                        </span>\n                    </a>\n                </li>\n                <li class=\"dropdown\">\n                    <a href=\"#\" class=\"dropdown-toggle\" data-toggle=\"dropdown\" role=\"button\">\n                        View &nbsp;\n                        <span class=\"glyphicon glyphicon-object-align-horizontal\"></span>\n                        {{!<span class=\"caret\"></span>}}\n                    </a>\n                    <ul class=\"dropdown-menu view\">\n                        <li class=\"all\"><a href=\"#\">All</a></li>\n                        <li class=\"model\"><a href=\"#\">Models</a></li>\n                        <li class=\"view\"><a href=\"#\">Views</a></li>\n                        <li class=\"controller\"><a href=\"#\">Controllers</a></li>\n                        <li class=\"model_controller\"><a href=\"#\">Models &amp; Controllers</a></li>\n                        <li class=\"controller_view\"><a href=\"#\">Controllers &amp; Views</a></li>\n                    </ul>\n                </li>\n                <li class=\"dropdown\">\n                    <a href=\"#\" class=\"dropdown-toggle\" data-toggle=\"dropdown\" role=\"button\">\n                        Export &nbsp;\n                        <span class=\"glyphicon glyphicon-export\"></span>\n                        {{!<span class=\"caret\"></span>}}\n                    </a>\n                    <ul class=\"dropdown-menu export\">\n                        <li class=\"json\"><a href=\"#\">JSON</a></li>\n                        <li class=\"cson\"><a href=\"#\">CSON</a></li>\n                        <li class=\"xml\"><a href=\"#\">XML</a></li>\n                    </ul>\n                </li>\n                <li class=\"dropdown\">\n                    <a href=\"#\" class=\"dropdown-toggle\" data-toggle=\"dropdown\" role=\"button\">\n                        Import &nbsp;\n                        <span class=\"glyphicon glyphicon-import\"></span>\n                        {{!<span class=\"caret\"></span>}}\n                    </a>\n                    <ul class=\"dropdown-menu import\">\n                        <li class=\"json\"><a href=\"#\">JSON</a></li>\n                        <li class=\"cson\"><a href=\"#\">CSON</a></li>\n                        <li class=\"xml\"><a href=\"#\">XML</a></li>\n                    </ul>\n                </li>\n            </ul>\n            <ul class=\"nav navbar-nav navbar-right\">\n                <form class=\"navbar-form\" role=\"search\">\n                    <div class=\"form-group relative\">\n                        <input type=\"text\" class=\"form-control search\" placeholder=\"Search classes\">\n                        <button type=\"button\" class=\"close\" title=\"Clear search\">\n                            <span>&times;</span>\n                        </button>\n                    </div>\n                </form>\n            </ul>\n        </div>\n    </div>\n</nav>",
    bindEvents: function(editor) {
      var closeBtn, commandPalette, createNewClass, createNewConnection, exportJSON, exportList, importJSON, importList, searchBar;
      commandPalette = editor.commandPalette;
      searchBar = this.find(".search");
      closeBtn = searchBar.siblings(".close");
      searchBar.keyup(function(evt) {
        var clss, k, l, len, len1, ref, ref1, val;
        if (evt.which === 27) {
          closeBtn.click();
          return true;
        }
        val = searchBar.val();
        if ((val != null ? val.length : void 0) > 0) {
          closeBtn.fadeIn(100);
        } else {
          closeBtn.fadeOut(100);
        }
        if ((val != null ? val.length : void 0) > 2) {
          editor.svg.select(".background").classed("searching", true);
          ref = editor.classes;
          for (k = 0, len = ref.length; k < len; k++) {
            clss = ref[k];
            if (!clss.name.contains(val)) {
              clss.views["class"].element.classed("searching", true);
            }
          }
        } else {
          editor.svg.select(".background").classed("searching", false);
          ref1 = editor.classes;
          for (l = 0, len1 = ref1.length; l < len1; l++) {
            clss = ref1[l];
            clss.views["class"].element.classed("searching", false);
          }
        }
        return true;
      });
      closeBtn.click(function() {
        searchBar.val("").keyup();
        return true;
      });
      commandPalette.registerCommand("search", "Search classes", function() {
        searchBar.focus();
        return true;
      });
      createNewClass = function() {
        var uml;
        uml = new App.UMLClass(editor, "_" + (Date.now()), [], []);
        editor.addClass(uml);
        editor.draw();
        return true;
      };
      this.find(".label.newClass").click(createNewClass);
      commandPalette.registerCommand("class.new", "New class", createNewClass);
      createNewConnection = function() {
        editor.showConnectionModal();
        return true;
      };
      this.find(".label.newConnection").click(createNewConnection);
      commandPalette.registerCommand("connection.new", "Connect classes", createNewConnection);
      this.find(".label.save").click(function() {
        console.info("TODO: save diagram to server!");
        return true;
      });
      this.find(".view li").each(function(idx, elem) {
        var $elem, setView, type;
        $elem = $(elem);
        type = $elem.attr("class");
        setView = function() {
          editor.setView(type).draw();
          return true;
        };
        $elem.click(setView);
        commandPalette.registerCommand("view." + type, "Set view to '" + type + "'", setView);
        return true;
      });
      exportJSON = function() {
        editor.showImportExportModal(editor.toJSON(), "json");
        return true;
      };
      exportList = this.find(".export");
      exportList.find(".json").click(exportJSON);
      commandPalette.registerCommand("export.json", "Export as JSON", exportJSON);
      importJSON = function() {
        editor.showImportExportModal("", "json");
        return true;
      };
      importList = this.find(".import");
      importList.find(".json").click(importJSON);
      commandPalette.registerCommand("import.json", "Import as JSON", importJSON);
      return this;
    },
    bindKeys: function(editor) {
      var self;
      self = this;
      Mousetrap(document.body).bind("u+s", function() {
        if (editor.inKeyboardMode) {
          self.find(".search").focus();
          return false;
        }
        return true;
      });
      return this;
    }
  };

  App.Templates.svg = "<div class=\"svgWrapper\">\n<svg class=\"uml\">\n    <rect class=\"background\" width=\"100%\" height=\"100%\"></rect>\n    <g class=\"zoomer\"></g>\n</svg>\n</div>";

  App.Templates.chooseConnection = {
    template: "<div class=\"modal fade uml chooseConnection\">\n    <div class=\"modal-dialog\">\n        <div class=\"modal-content\">\n            <div class=\"modal-header\">\n                <button type=\"button\" class=\"close\" data-dismiss=\"modal\">\n                    <span>&times;</span>\n                </button>\n                <h3 class=\"modal-title\">\n                    Choose a connection / dependency type\n                </h3>\n            </div>\n            <div class=\"modal-body\">\n                <div class=\"general\">\n                    <form class=\"form-horizontal form-group\">\n                        <h4>Class level relationships</h4>\n                        <div class=\"row padded\">\n                            <div class=\"col-xs-8 col-xs-push-2\">\n                                <div class=\"input-group clickable\">\n                                    <span class=\"input-group-addon\">\n                                        <input type=\"radio\" name=\"connectionType\" value=\"generalization\" />\n                                    </span>\n                                    <input type=\"text\" class=\"form-control no-focus\" readonly value=\"Generalization ('inherit from X')\" />\n                                </div>\n                            </div>\n                        </div>\n                        <div class=\"row padded\">\n                            <div class=\"col-xs-8 col-xs-push-2\">\n                                <div class=\"input-group clickable\">\n                                    <span class=\"input-group-addon\">\n                                        <input type=\"radio\" name=\"connectionType\" value=\"realization\" />\n                                    </span>\n                                    <input type=\"text\" class=\"form-control no-focus\" readonly value=\"Realization ('implement X')\" />\n                                </div>\n                            </div>\n                        </div>\n\n                        <h4>Instance level relationships</h4>\n                        <div class=\"row padded\">\n                            <div class=\"col-xs-8 col-xs-push-2\">\n                                <div class=\"input-group clickable\">\n                                    <span class=\"input-group-addon\">\n                                        <input type=\"radio\" name=\"connectionType\" value=\"association\" />\n                                    </span>\n                                    <input type=\"text\" class=\"form-control no-focus\" readonly value=\"Association ('has relationship to X')\" />\n                                </div>\n                            </div>\n                        </div>\n                        <div class=\"row padded\">\n                            <div class=\"col-xs-8 col-xs-push-2\">\n                                <div class=\"input-group clickable\">\n                                    <span class=\"input-group-addon\">\n                                        <input type=\"radio\" name=\"connectionType\" value=\"aggregation\" />\n                                    </span>\n                                    <input type=\"text\" class=\"form-control no-focus\" readonly value=\"Aggregation ('is part of X')\" />\n                                </div>\n                            </div>\n                        </div>\n                        <div class=\"row padded\">\n                            <div class=\"col-xs-8 col-xs-push-2\">\n                                <div class=\"input-group clickable\">\n                                    <span class=\"input-group-addon\">\n                                        <input type=\"radio\" name=\"connectionType\" value=\"composition\" />\n                                    </span>\n                                    <input type=\"text\" class=\"form-control no-focus\" readonly value=\"Composition ('is necessary part of X')\" />\n                                </div>\n                            </div>\n                        </div>\n                    </form>\n                </div>\n            </div>\n            <div class=\"modal-footer\">\n                <button type=\"button\" class=\"btn btn-default cancel\" data-dismiss=\"modal\">Cancel</button>\n                <button type=\"button\" class=\"btn btn-primary save\">Next (select classes)</button>\n            </div>\n        </div>\n    </div>\n</div>",
    bindEvents: function(editor) {
      var inputGroups, inputs, saveBtn;
      saveBtn = this.find(".save");
      inputGroups = this.find(".input-group");
      inputGroups.click(function() {
        $(this).find("input[type='radio']").prop("checked", true);
        inputGroups.filter(".has-error").removeClass("has-error");
        if (saveBtn.hasClass("btn-danger")) {
          saveBtn.removeClass("btn-danger");
        }
        return true;
      });
      inputs = this.find("[name='connectionType']");
      saveBtn.click(function() {
        var input;
        input = inputs.filter(":checked");
        if (input.length > 0) {
          editor.hideConnectionModal().showClassNamesOnly().dataCollector.reset().setType(input.val()).show();
        } else {
          inputGroups.eq(0).addClass("has-error");
          saveBtn.addClass("btn-danger");
        }
        return true;
      });
      return this;
    }
  };

  App.Templates.selectClassesForConnection = {
    template: "<div class=\"selectClassesForConnection\">\n    <div class=\"alert alert-danger alert-sm\">\n        <div class=\"row padded\">\n            <div class=\"centered bigger\">\n                <strong>STATUS</strong>\n            </div>\n        </div>\n        <div class=\"row padded\">\n            <div class=\"col-xs-4\">\n                <strong>type:</strong>\n                <span class=\"type\"></span>\n            </div>\n            <div class=\"col-xs-4\">\n                <strong>source:</strong>\n                <span class=\"source\"></span>\n            </div>\n            <div class=\"col-xs-4\">\n                <strong>target:</strong>\n                <span class=\"target\"></span>\n            </div>\n        </div>\n        <div class=\"row\">\n            <div class=\"col-xs-4 col-xs-push-4 centered\">\n                <button class=\"btn btn-primary save\" style=\"margin-right: 15px;\">Save</button>\n                <button class=\"btn btn-danger cancel\">Cancel</button>\n            </div>\n        </div>\n    </div>\n</div>",
    bindEvents: function(editor) {
      var cancelBtn, saveBtn;
      saveBtn = this.find(".save");
      cancelBtn = this.find(".cancel");
      saveBtn.click(function() {
        var newConnection;
        newConnection = editor.dataCollector.hide().createConnection();
        editor.addConnection(newConnection).draw();
        return true;
      });
      cancelBtn.click(function() {
        editor.showClassData().dataCollector.hide();
        return true;
      });
      return this;
    }
  };

  App.Templates.editUMLClass = {
    template: "<div class=\"modal fade uml edit\">\n    <div class=\"modal-dialog\">\n        <div class=\"modal-content\">\n            <div class=\"modal-header\">\n                <button type=\"button\" class=\"close\" data-dismiss=\"modal\">\n                    <span>&times;</span>\n                </button>\n                <h3 class=\"modal-title\">\n                    <span>Edit \"<span class=\"className\">{{className}}</span>\"</span>\n                    <button type=\"button\" class=\"btn btn-danger deleteClass right hpadded\">Delete class</button>\n                    <button type=\"button\" class=\"btn btn-default renameClass right\">Rename class</button>\n                </h3>\n            </div>\n            <div class=\"modal-body\">\n                <div class=\"general\">\n                    <h4>General options</h4>\n                    <form class=\"form-horizontal form-group\">\n                        <div class=\"row\">\n                            <div class=\"col-xs-4 col-xs-push-2\">\n                                <div class=\"input-group\">\n                                    <span class=\"input-group-addon\">\n                                        <input type=\"checkbox\" class=\"abstractCheckbox\"{{isAbstract}} />\n                                    </span>\n                                    <input type=\"text\" class=\"form-control\" readonly value=\"is abstract?\" />\n                                </div>\n                            </div>\n                            <div class=\"col-xs-4 col-xs-push-2\">\n                                <div class=\"input-group\">\n                                    <span class=\"input-group-addon\">\n                                        <input type=\"checkbox\" class=\"interfaceCheckbox\"{{isInterface}} />\n                                    </span>\n                                    <input type=\"text\" class=\"form-control\" readonly value=\"is interface?\" />\n                                </div>\n                            </div>\n                        </div>\n                    </form>\n                </div>\n                <div class=\"attributes\">\n                    <h4>Attributes</h4>\n                    <form class=\"form-horizontal\"></form>\n                    <div class=\"row\">\n                        <div class=\"col-xs-10 col-xs-push-2\">\n                            <button type=\"button\" class=\"btn btn-primary add\">Add attribute</button>\n                        </div>\n                    </div>\n                </div>\n                <hr />\n                <div class=\"methods\">\n                    <h4>Methods</h4>\n                    <form class=\"form-horizontal\"></form>\n                    <div class=\"row\">\n                        <div class=\"col-xs-10 col-xs-push-2\">\n                            <button type=\"button\" class=\"btn btn-primary add\">Add method</button>\n                        </div>\n                    </div>\n                </div>\n            </div>\n            <div class=\"modal-footer\">\n                <button type=\"button\" class=\"btn btn-danger cancel\" data-dismiss=\"modal\">Cancel</button>\n                <button type=\"button\" class=\"btn btn-default reset\">Reset</button>\n                <button type=\"button\" class=\"btn btn-primary btn-lg save\">Save changes</button>\n            </div>\n        </div>\n    </div>\n</div>",
    bindEvents: function(view) {
      var self;
      self = this;
      this.find("button.deleteClass").click(function() {
        if (confirm("Are you really sure you want to delete the class '" + view.model.name + "' and all of its incoming and outgoing dependencies?")) {
          view.hide();
          self.on("hidden.bs.modal", function() {
            view.model.editor.removeClass(view.model);
            return true;
          });
        }
        return true;
      });
      this.find("button.renameClass").click(function() {
        var name;
        if ((name = prompt("Enter the new name of the class!")) != null) {
          view.model.name = name;
          view.draw();
        }
        return true;
      });
      this.find("button.cancel").click(function() {
        view.draw();
        return true;
      });
      this.find("button.reset").click(function() {
        view.draw();
        return true;
      });
      this.find("button.save").click(function() {
        var data;
        data = view._getInput();
        view.model.update(data.attributes, data.methods, data.generalOptions);
        view.hide();
        return true;
      });
      this.find(".attributes .add").click(function() {
        self.find(".attributes form").append(view._createFormRow({
          name: "new attribute",
          type: "new type",
          visibility: "public"
        }, true));
        return true;
      });
      this.find(".methods .add").click(function() {
        self.find(".methods form").append(view._createFormRow({
          name: "new method",
          type: "new type",
          visibility: "public"
        }, false));
        return true;
      });
      return this;
    }
  };

  App.Templates.editUMLClassParamRow = {
    template: "<div class=\"row padded parameter\">\n    <div class=\"col-xs-3\">\n        <input type=\"text\" class=\"form-control name\" placeholder=\"parameter name\" value=\"{{name}}\" />\n    </div>\n    <div class=\"col-xs-3\">\n        <input type=\"text\" class=\"form-control type\" placeholder=\"parameter type\" value=\"{{type}}\" />\n    </div>\n    <div class=\"col-xs-2\">\n        <input type=\"text\" class=\"form-control default\" placeholder=\"default\" value=\"{{default}}\" data-current-value=\"{{default}}\" />\n    </div>\n    <div class=\"col-xs-3\">\n        <div class=\"input-group\">\n            <span class=\"input-group-addon\">\n                <input type=\"checkbox\" class=\"nullCheckbox\" />\n            </span>\n            <input type=\"text\" class=\"form-control\" readonly value=\"NULL\" />\n        </div>\n    </div>\n    <div class=\"col-xs-1\">\n        <button type=\"button\" class=\"close parameter hidden\" title=\"Remove parameter\">\n            <span>&times;</span>\n        </button>\n    </div>\n</div>"
  };

  App.Templates.editUMLClassParamList = {
    template: "<div class=\"row\">\n    <div class=\"col-xs-12\">\n        <label class=\"control-label\">Parameters</label>\n    </div>\n</div>\n{{#parameters}}\n    {{{.}}}\n{{/parameters}}\n<div class=\"row\">\n    <div class=\"col-xs-12\">\n        <button type=\"button\" class=\"btn btn-primary btn-sm add parameter\">Add parameter</button>\n    </div>\n</div>"
  };

  App.Templates.editUMLClassFormRow = {
    template: "<div class=\"form-group\">\n  <div class=\"row padded\">\n      <label for=\"{{id}}\" class=\"col-xs-2 control-label\">{{name}}</label>\n      <div class=\"col-xs-8\">\n          <input type=\"text\" id=\"{{id}}\" class=\"form-control name\" placeholder=\"Name\" value=\"{{name}}\" />\n      </div>\n      <div class=\"col-xs-1\">\n          <button type=\"button\" class=\"close property hidden\" title=\"Remove property\">\n              <span>&times;</span>\n          </button>\n      </div>\n  </div>\n  <div class=\"row padded\">\n      <div class=\"col-xs-8 col-xs-push-2\">\n          <input type=\"text\" class=\"form-control type\" placeholder=\"Type\" value=\"{{type}}\" />\n      </div>\n  </div>\n  <div class=\"row padded\">\n      <div class=\"col-xs-8 col-xs-push-2\">\n          {{#select}}\n              <select class=\"form-control visibility\">\n                  <option value=\"public\" {{public}}>+ public</option>\n                  <option value=\"private\" {{private}}>- private</option>\n                  <option value=\"protected\" {{protected}}># protected</option>\n                  <option value=\"package\" {{package}}>~ package</option>\n              </select>\n          {{/select}}\n      </div>\n  </div>\n  {{#paramValue}}\n      <div class=\"row padded\">\n          <div class=\"col-xs-4 col-xs-push-2\">\n              <input type=\"text\" class=\"form-control default\" placeholder=\"Default value (optional)\" value=\"{{default}}\" data-current-value=\"{{default}}\" />\n          </div>\n          <div class=\"col-xs-4 col-xs-push-2\">\n              <div class=\"input-group\">\n                  <span class=\"input-group-addon\">\n                      <input type=\"checkbox\" class=\"nullCheckbox\" {{checked}} />\n                  </span>\n                  <input type=\"text\" class=\"form-control\" readonly value=\"NULL\" />\n              </div>\n          </div>\n      </div>\n  {{/paramValue}}\n  {{#paramList}}\n      <div class=\"row padded\">\n          <div class=\"col-xs-8 col-xs-push-2\">\n              {{! triple mustache = unescaped HTML}}\n              {{{list}}}\n          </div>\n      </div>\n  {{/paramList}}\n</div>",
    bindEvents: function(id, property) {
      var self;
      self = this;
      this.find("#" + id).blur(function() {
        var input;
        input = $(this);
        input.parent().siblings("label").text(input.val());
        return true;
      });
      this.find(".close.hidden.property").click(function() {
        if (confirm("Remove '" + property.name + "'?")) {
          self.remove();
        }
        return true;
      });
      this.find(".nullCheckbox").change(function() {
        var box, input;
        box = $(this);
        input = box.closest(".row").find(".default");
        if (box.is(":checked")) {
          input.attr("data-current-value", input.val());
          input.val("");
        } else {
          input.val(input.attr("data-current-value"));
        }
        return true;
      });
      this.find(".add.parameter").click(function() {
        $(this).closest(".row").before(App.Templates.getHTML("editUMLClassParamRow", {
          name: "",
          type: "",
          "default": ""
        }));
        return true;
      });
      this.find(".close.hidden.parameter").click(function() {
        $(this).closest(".row").remove();
        return true;
      });
      return this;
    }
  };

  App.Templates.editUMLClass = {
    template: "<div class=\"modal fade uml edit\">\n    <div class=\"modal-dialog\">\n        <div class=\"modal-content\">\n            <div class=\"modal-header\">\n                <button type=\"button\" class=\"close\" data-dismiss=\"modal\">\n                    <span>&times;</span>\n                </button>\n                <h3 class=\"modal-title\">\n                    <span>Edit \"<span class=\"className\">{{className}}</span>\"</span>\n                    <button type=\"button\" class=\"btn btn-danger deleteClass right hpadded\">Delete class</button>\n                    <button type=\"button\" class=\"btn btn-default renameClass right\">Rename class</button>\n                </h3>\n            </div>\n            <div class=\"modal-body\">\n                <div class=\"general\">\n                    <h4>General options</h4>\n                    <form class=\"form-horizontal form-group\">\n                        <div class=\"row\">\n                            <div class=\"col-xs-4 col-xs-push-2\">\n                                <div class=\"input-group\">\n                                    <span class=\"input-group-addon\">\n                                        <input type=\"checkbox\" class=\"abstractCheckbox\"{{isAbstract}} />\n                                    </span>\n                                    <input type=\"text\" class=\"form-control\" readonly value=\"is abstract?\" />\n                                </div>\n                            </div>\n                            <div class=\"col-xs-4 col-xs-push-2\">\n                                <div class=\"input-group\">\n                                    <span class=\"input-group-addon\">\n                                        <input type=\"checkbox\" class=\"interfaceCheckbox\"{{isInterface}} />\n                                    </span>\n                                    <input type=\"text\" class=\"form-control\" readonly value=\"is interface?\" />\n                                </div>\n                            </div>\n                        </div>\n                    </form>\n                </div>\n                <div class=\"attributes\">\n                    <h4>Attributes</h4>\n                    <form class=\"form-horizontal\"></form>\n                    <div class=\"row\">\n                        <div class=\"col-xs-10 col-xs-push-2\">\n                            <button type=\"button\" class=\"btn btn-primary add\">Add attribute</button>\n                        </div>\n                    </div>\n                </div>\n                <hr />\n                <div class=\"methods\">\n                    <h4>Methods</h4>\n                    <form class=\"form-horizontal\"></form>\n                    <div class=\"row\">\n                        <div class=\"col-xs-10 col-xs-push-2\">\n                            <button type=\"button\" class=\"btn btn-primary add\">Add method</button>\n                        </div>\n                    </div>\n                </div>\n            </div>\n            <div class=\"modal-footer\">\n                <button type=\"button\" class=\"btn btn-danger cancel\" data-dismiss=\"modal\">Cancel</button>\n                <button type=\"button\" class=\"btn btn-default reset\">Reset</button>\n                <button type=\"button\" class=\"btn btn-primary btn-lg save\">Save changes</button>\n            </div>\n        </div>\n    </div>\n</div>",
    bindEvents: function(view) {
      var self;
      self = this;
      this.find("button.deleteClass").click(function() {
        if (confirm("Are you really sure you want to delete the class '" + view.model.name + "' and all of its incoming and outgoing dependencies?")) {
          view.hide();
          self.on("hidden.bs.modal", function() {
            view.model.editor.removeClass(view.model);
            return true;
          });
        }
        return true;
      });
      this.find("button.renameClass").click(function() {
        var name;
        if ((name = prompt("Enter the new name of the class!")) != null) {
          view.model.name = name;
          view.draw();
        }
        return true;
      });
      this.find("button.cancel").click(function() {
        view.draw();
        return true;
      });
      this.find("button.reset").click(function() {
        view.draw();
        return true;
      });
      this.find("button.save").click(function() {
        var data;
        data = view._getInput();
        view.model.update(data.attributes, data.methods, data.generalOptions);
        view.hide();
        return true;
      });
      this.find(".attributes .add").click(function() {
        self.find(".attributes form").append(view._createFormRow({
          name: "new attribute",
          type: "new type",
          visibility: "public"
        }, true));
        return true;
      });
      this.find(".methods .add").click(function() {
        self.find(".methods form").append(view._createFormRow({
          name: "new method",
          type: "new type",
          visibility: "public"
        }, false));
        return true;
      });
      return this;
    }
  };

  App.Templates.editUMLClassParamRow = {
    template: "<div class=\"row padded parameter\">\n    <div class=\"col-xs-3\">\n        <input type=\"text\" class=\"form-control name\" placeholder=\"parameter name\" value=\"{{name}}\" />\n    </div>\n    <div class=\"col-xs-3\">\n        <input type=\"text\" class=\"form-control type\" placeholder=\"parameter type\" value=\"{{type}}\" />\n    </div>\n    <div class=\"col-xs-2\">\n        <input type=\"text\" class=\"form-control default\" placeholder=\"default\" value=\"{{default}}\" data-current-value=\"{{default}}\" />\n    </div>\n    <div class=\"col-xs-3\">\n        <div class=\"input-group\">\n            <span class=\"input-group-addon\">\n                <input type=\"checkbox\" class=\"nullCheckbox\" />\n            </span>\n            <input type=\"text\" class=\"form-control\" readonly value=\"NULL\" />\n        </div>\n    </div>\n    <div class=\"col-xs-1\">\n        <button type=\"button\" class=\"close parameter hidden\" title=\"Remove parameter\">\n            <span>&times;</span>\n        </button>\n    </div>\n</div>"
  };

  App.Templates.editUMLClassParamList = {
    template: "<div class=\"row\">\n    <div class=\"col-xs-12\">\n        <label class=\"control-label\">Parameters</label>\n    </div>\n</div>\n{{#parameters}}\n    {{{.}}}\n{{/parameters}}\n<div class=\"row\">\n    <div class=\"col-xs-12\">\n        <button type=\"button\" class=\"btn btn-primary btn-sm add parameter\">Add parameter</button>\n    </div>\n</div>"
  };

  App.Templates.importExportModal = {
    template: "<div class=\"modal fade uml edit\">\n    <div class=\"modal-dialog\">\n        <div class=\"modal-content\">\n            <div class=\"modal-header\">\n                <button type=\"button\" class=\"close\" data-dismiss=\"modal\">\n                    <span>&times;</span>\n                </button>\n                <h3 class=\"modal-title\">\n                    Import / Export\n                </h3>\n            </div>\n            <div class=\"modal-body\">\n                <form>\n                    <div class=\"row padded\">\n                        <div class=\"col-xs-4\">\n                            <div class=\"input-group\">\n                                <span class=\"input-group-addon\">\n                                    <input type=\"radio\" name=\"format\" value=\"json\" tabindex=\"50\" />\n                                </span>\n                                <input type=\"text\" class=\"form-control\" readonly value=\"JSON\" tabindex=\"-1\" />\n                            </div>\n                        </div>\n                        <div class=\"col-xs-4\">\n                            <div class=\"input-group\">\n                                <span class=\"input-group-addon\">\n                                    <input type=\"radio\" name=\"format\" value=\"cson\" tabindex=\"51\" />\n                                </span>\n                                <input type=\"text\" class=\"form-control\" readonly value=\"CSON\" tabindex=\"-1\" />\n                            </div>\n                        </div>\n                        <div class=\"col-xs-4\">\n                            <div class=\"input-group\">\n                                <span class=\"input-group-addon\">\n                                    <input type=\"radio\" name=\"format\" value=\"xml\" tabindex=\"52\" />\n                                </span>\n                                <input type=\"text\" class=\"form-control\" readonly value=\"XML\" tabindex=\"-1\" />\n                            </div>\n                        </div>\n                    </div>\n                    <textarea class=\"form-control\" style=\"resize: vertical; height: 375px;\"></textarea>\n                    <input type=\"text\" class=\"invisible\" />\n                </form>\n            </div>\n            <div class=\"modal-footer\">\n                <button type=\"button\" class=\"btn btn-default\" data-dismiss=\"modal\">Close</button>\n                <button type=\"button\" class=\"btn btn-primary import\">Import</button>\n            </div>\n        </div>\n    </div>\n</div>",
    bindEvents: function(editor) {
      var radioBtns, self, textarea;
      self = this;
      radioBtns = this.find("[name='format']");
      textarea = this.find("textarea");
      this.on("show.bs.modal", function() {
        radioBtns.filter("[value='" + (self.data("format")) + "']").prop("checked", true);
        textarea.val(self.data("value"));
        return true;
      });
      this.on("shown.bs.modal", function() {
        self.find(".invisible").focus();
        return true;
      });
      this.on("hidden.bs.modal", function() {
        textarea.val("");
        return true;
      });
      this.find(".btn.import").click(function() {
        editor.fromJSON(textarea.val()).draw();
        self.modal("hide");
        return true;
      });
      return this;
    },
    bindKeys: function(editor) {
      var elem, self;
      self = this;
      elem = this.get(0);
      Mousetrap(elem).bind("esc", function(evt, combo) {
        self.modal("hide");
        return false;
      }).bind("u+w", function(evt, combo) {
        if (editor.inKeyboardMode) {
          self.modal("hide");
          return false;
        }
        return true;
      });
      return this;
    }
  };

  App.Templates.commandPalette = {
    template: "<span class=\"commandPalette label label-xlg label-info\">\n    <div class=\"row\">\n        <div class=\"col-xs-1\">\n            <span class=\"glyphicon glyphicon-console\"></span>\n        </div>\n        <div class=\"col-xs-11\">\n            <input class=\"search form-control\" type=\"text\" placeholder=\"Search commands\" />\n        </div>\n    </div>\n    <div class=\"row\">\n        <div class=\"col-xs-12 results\">\n        </div>\n    </div>\n</span>\n<div class=\"commandPalette overlay\" />",
    bindEvents: function(commandPalette) {
      var resultTemplate, results;
      resultTemplate = "<div class=\"row result\" data-idx=\"{{index}}\">\n    <div class=\"col-xs-11 col-xs-push-1\">\n        <div class=\"row\">\n            <div class=\"col-xs-12 name\">\n                {{name}}\n            </div>\n        </div>\n        <div class=\"row\">\n            <div class=\"col-xs-12 path\">\n                {{path}}\n            </div>\n        </div>\n\n    </div>\n</div>";
      results = this.find(".results");
      this.find(".search").keyup(function() {
        var data, i, match, query, resultData;
        query = $(this).val();
        if (query !== commandPalette.lastQuery) {
          commandPalette.lastQuery = query;
          resultData = (function() {
            var k, len, ref, results1;
            ref = commandPalette.find(query);
            results1 = [];
            for (i = k = 0, len = ref.length; k < len; i = ++k) {
              match = ref[i];
              results1.push({
                path: match.path,
                name: match.name,
                index: i
              });
            }
            return results1;
          })();
          if (query.length >= 2) {
            results.empty().append(((function() {
              var k, len, results1;
              results1 = [];
              for (k = 0, len = resultData.length; k < len; k++) {
                data = resultData[k];
                results1.push(Mustache.to_html(resultTemplate, data));
              }
              return results1;
            })()).join("")).find(".result").click(function() {
              commandPalette.currentResultIdx = parseInt($(this).attr("data-idx"), 10);
              commandPalette.execCurrent(true);
              return false;
            });
            results.find(".result").mouseenter(function() {
              var $elem;
              $elem = $(this);
              $elem.addClass("active").siblings(".active").removeClass("active");
              commandPalette.currentResultIdx = $elem.attr("data-idx");
              return true;
            });
          } else {
            results.empty();
          }
        }
        return true;
      });
      this.filter(".overlay").click(function() {
        commandPalette.hide();
        return true;
      });
      return this;
    },
    bindKeys: function(commandPalette) {
      Mousetrap(this.get(0)).bind(["up", "down"], function(evt, combo) {
        if (combo === "up") {
          commandPalette.prevResult();
        } else {
          commandPalette.nextResult();
        }
        return false;
      }).bind("enter", function(evt, combo) {
        commandPalette.execCurrent(true);
        return false;
      }).bind("esc", function(evt, combo) {
        commandPalette.hide();
        return false;
      });
      return this;
    }
  };

  App.Algorithms.levenshteinDistance = function(a, b) {
    var aLength, bLength, i, j, k, l, m, matrix, n, ref, ref1, ref2, ref3;
    aLength = a.length;
    bLength = b.length;
    if (aLength === 0) {
      return bLength;
    }
    if (bLength === 0) {
      return aLength;
    }
    matrix = [];
    for (i = k = 0, ref = bLength; 0 <= ref ? k <= ref : k >= ref; i = 0 <= ref ? ++k : --k) {
      matrix[i] = [i];
    }
    for (j = l = 0, ref1 = aLength; 0 <= ref1 ? l <= ref1 : l >= ref1; j = 0 <= ref1 ? ++l : --l) {
      matrix[0][j] = j;
    }
    for (i = m = 1, ref2 = bLength; 1 <= ref2 ? m <= ref2 : m >= ref2; i = 1 <= ref2 ? ++m : --m) {
      for (j = n = 1, ref3 = aLength; 1 <= ref3 ? n <= ref3 : n >= ref3; j = 1 <= ref3 ? ++n : --n) {
        if (b.charAt(i - 1) === a.charAt(j - 1)) {
          matrix[i][j] = matrix[i - 1][j - 1];
        } else {
          matrix[i][j] = Math.min(matrix[i - 1][j - 1] + 1, Math.min(matrix[i][j - 1] + 1, matrix[i - 1][j] + 1));
        }
      }
    }
    return matrix[bLength][aLength];
  };

  App.Algorithms.levDist = App.Algorithms.levenshteinDistance;

  getTemplate = function() {
    var args, data, elem, elementFromString, name, ref, ref1, template;
    elementFromString = arguments[0], name = arguments[1], data = arguments[2], args = 4 <= arguments.length ? slice.call(arguments, 3) : [];
    if ((template = App.Templates[name]) != null) {
      if (template.template != null) {
        elem = Mustache.to_html(template.template, data);
        elem = elementFromString(elem);
        if ((ref = template.bindEvents) != null) {
          ref.apply(elem, args);
        }
        if ((ref1 = template.bindKeys) != null) {
          ref1.apply(elem, args);
        }
      } else {
        elem = Mustache.to_html(template, data);
        elem = elementFromString(elem);
      }
      return elem;
    }
    return null;
  };

  App.Templates.get = function() {
    var args, data, name;
    name = arguments[0], data = arguments[1], args = 3 <= arguments.length ? slice.call(arguments, 2) : [];
    return getTemplate.apply(null, [function(html) {
      return $(html);
    }, name, data].concat(slice.call(args)));
  };

  App.Templates.getHTML = function() {
    var args, data, name;
    name = arguments[0], data = arguments[1], args = 3 <= arguments.length ? slice.call(arguments, 2) : [];
    return getTemplate.apply(null, [function(html) {
      return html;
    }, name, data].concat(slice.call(args)));
  };

  App.Templates.getD3 = function() {
    var args, data, elem, name, ref, template;
    name = arguments[0], data = arguments[1], args = 3 <= arguments.length ? slice.call(arguments, 2) : [];
    if ((template = App.Templates[name]) != null) {
      if (template.template != null) {
        elem = $(Mustache.to_html(template.template, data));
        elem = d3.select(elem.get(0));
        if ((ref = template.bindEvents) != null) {
          ref.apply(elem, args);
        }
      } else {
        elem = Mustache.to_html(template, data);
        elem = d3.select(elem.get(0));
      }
      return elem;
    }
    return null;
  };

  App.UMLConnectionDataCollector = (function() {
    function UMLConnectionDataCollector(editor) {
      this.editor = editor;
      this.reset();
      this.div = App.Templates.get("selectClassesForConnection", null, editor);
      $(document.body).append(this.div);
    }

    UMLConnectionDataCollector.prototype.createConnection = function() {
      var clss;
      console.log("creating connection....", this.data);
      clss = App.Connections[this.data.type._capitalize()];
      return new clss(this.data.source, this.data.target);
    };

    UMLConnectionDataCollector.prototype.reset = function() {
      this.data = {
        source: null,
        target: null,
        type: null
      };
      return this;
    };

    UMLConnectionDataCollector.prototype.setType = function(type) {
      this.data.type = type;
      this._update();
      return this;
    };

    UMLConnectionDataCollector.prototype.toggleData = function(className) {
      var res;
      if (this.data.source === className) {
        this.data.source = null;
        res = false;
      } else if (this.data.target === className) {
        this.data.target = null;
        res = false;
      } else if (this.data.source == null) {
        this.data.source = className;
        res = true;
      } else if (this.data.target == null) {
        this.data.target = className;
        res = true;
      } else {
        throw new Error("Invalid data given or existing data is invalid!");
      }
      this._update();
      return res;
    };

    UMLConnectionDataCollector.prototype._update = function() {
      this.div.find(".type").text(this.data.type || "?");
      this.div.find(".source").text(this.data.source || "?");
      this.div.find(".target").text(this.data.target || "?");
      return this;
    };

    UMLConnectionDataCollector.prototype.show = function() {
      this.div.fadeIn(100);
      return this;
    };

    UMLConnectionDataCollector.prototype.hide = function() {
      this.div.fadeOut(100);
      return this;
    };

    return UMLConnectionDataCollector;

  })();

  App.CommandPalette = (function() {
    function CommandPalette(editor) {
      this.editor = editor;
      this.commands = {};
      this.element = App.Templates.get("commandPalette", null, this);
      this.lastQuery = "";
      this.visible = false;
      this.currentResultIdx = -1;
      this.resultSet = [];
      $(document.body).append(this.element);
    }

    CommandPalette.prototype.registerCommand = function(path, name, callback) {
      this.commands[path] = {
        name: name,
        callback: callback
      };
      return this;
    };

    CommandPalette.prototype.unregisterCommand = function(path) {
      delete this.commands[path];
      return this;
    };

    CommandPalette.prototype.exec = function(path, hide) {
      var ref;
      if (hide == null) {
        hide = true;
      }
      if (hide) {
        this.hide();
      }
      return (ref = this.commands[path]) != null ? typeof ref.callback === "function" ? ref.callback() : void 0 : void 0;
    };

    CommandPalette.prototype.execCurrent = function(hide) {
      return this.exec(this.resultSet[this.currentResultIdx].path, hide);
    };

    CommandPalette.prototype.find = function(input, limit) {
      var dist, levDist, matchBy, nameDist, obj, path, pathDist, ref, res;
      if (limit == null) {
        limit = 7;
      }
      this.currentResultIdx = -1;
      res = [];
      levDist = App.Algorithms.levDist;
      ref = this.commands;
      for (path in ref) {
        obj = ref[path];
        pathDist = levDist(input, path);
        nameDist = levDist(input, obj.name);
        if (pathDist < nameDist) {
          dist = pathDist;
          matchBy = "path";
        } else if (nameDist < pathDist) {
          dist = nameDist;
          matchBy = "name";
        } else {
          dist = pathDist;
          matchBy = "both";
        }
        if (dist < Math.min(path.length, obj.name.length) * 0.8) {
          res.push({
            path: path,
            name: obj.name,
            callback: obj.callback,
            dist: dist,
            matchBy: matchBy
          });
        }
      }
      res.sort(function(a, b) {
        return a.dist - b.dist;
      });
      this.resultSet = res;
      return res.slice(0, limit);
    };

    CommandPalette.prototype.reset = function() {
      this.lastQuery = "";
      this.visible = false;
      this.currentResultIdx = -1;
      this.resultSet = [];
      this.element.find(".results").empty();
      this.element.find(".search").val("");
      return this;
    };

    CommandPalette.prototype.show = function() {
      this.editor.navbar.addClass("blurred");
      this.editor.svg.classed("blurred", true);
      this.element.fadeIn(200, (function(_this) {
        return function() {
          _this.visible = true;
          _this.element.find(".search").focus();
          return true;
        };
      })(this));
      return this;
    };

    CommandPalette.prototype.hide = function() {
      this.editor.navbar.removeClass("blurred");
      this.editor.svg.classed("blurred", false);
      this.element.fadeOut(200, (function(_this) {
        return function() {
          _this.visible = false;
          _this.reset();
          return true;
        };
      })(this));
      return this;
    };

    CommandPalette.prototype.toggle = function() {
      if (this.visible) {
        return this.hide();
      }
      return this.show();
    };

    CommandPalette.prototype.nextResult = function() {
      if (this.currentResultIdx < this.resultSet.length - 1) {
        if (this.currentResultIdx >= 0) {
          this.element.find(".result").eq(this.currentResultIdx).removeClass("active").next(".result").addClass("active");
        } else {
          this.element.find(".result").eq(0).addClass("active");
        }
        this.currentResultIdx++;
      }
      return this;
    };

    CommandPalette.prototype.prevResult = function() {
      if (this.currentResultIdx > 0) {
        this.element.find(".result").eq(this.currentResultIdx).removeClass("active").prev(".result").addClass("active");
        this.currentResultIdx--;
      }
      return this;
    };

    return CommandPalette;

  })();

  App.UMLEditor = (function() {
    function UMLEditor() {
      var self;
      self = this;
      this.graph = new dagreD3.graphlib.Graph({
        multigraph: true
      });
      this.dataCollector = new App.UMLConnectionDataCollector(this);
      this.commandPalette = new App.CommandPalette(this);
      this.view = "all";
      this.svg = null;
      this.navbar = App.Templates.get("navbar", null, this);
      this.connectionModal = App.Templates.get("chooseConnection", null, this);
      this.importExportModal = App.Templates.get("importExportModal", null, this);
      $(document.body).append(this.navbar).append(this.connectionModal).append(this.chooseStatus);
      this.models = [];
      this.views = [];
      this.controllers = [];
      Object.defineProperty(this, "classes", {
        get: function() {
          return this._mapTypeToList(this.view);
        },
        set: function() {
          if (DEBUG) {
            throw new Error("Cannot set UMLEditor.classes!");
          }
          return this;
        }
      });
      Mousetrap(document.body).bind("mod+shift+p", function() {
        self.commandPalette.toggle();
        return false;
      });
    }

    UMLEditor.prototype._mapTypeToList = function(type) {
      return {
        all: this.models.concat(this.views).concat(this.controllers),
        model: this.models,
        view: this.views,
        controller: this.controllers,
        model_controller: this.models.concat(this.controllers),
        controller_view: this.controllers.concat(this.views)
      }[type];
    };

    UMLEditor.prototype.setView = function(type) {
      if (this._mapTypeToList(type) != null) {
        this.view = type;
      } else if (DEBUG) {
        throw new Error("UMLEditor::setView: Invalid type given!");
      }
      return this;
    };

    UMLEditor.prototype.resetSvg = function() {
      var svg;
      svg = App.Templates.get("svg");
      if (this.svg != null) {
        $(this.svg.node()).replaceWith(svg);
      } else {
        $(document.body).append(svg);
      }
      this.svg = d3.select(svg.find("svg.uml").get(0));
      return this;
    };

    UMLEditor.prototype.addClass = function(umlClass) {
      var clss, ref;
      if (ref = umlClass.name, indexOf.call((function() {
        var k, len, ref1, results1;
        ref1 = this.classes;
        results1 = [];
        for (k = 0, len = ref1.length; k < len; k++) {
          clss = ref1[k];
          results1.push(clss.name);
        }
        return results1;
      }).call(this), ref) < 0) {
        this._mapTypeToList(umlClass.type).push(umlClass);
      } else {
        throw new Error("Class with name '" + umlClass.name + "' already exists!");
      }
      return this;
    };

    UMLEditor.prototype.removeClass = function(umlClass) {
      umlClass["delete"]();
      this._mapTypeToList(umlClass.type).remove(umlClass);
      return this;
    };

    UMLEditor.prototype.addConnection = function(connection) {
      var sourceClass;
      sourceClass = this.getClass(connection.source);
      sourceClass.addConnection(connection);
      return this;
    };

    UMLEditor.prototype.removeConnection = function() {
      return this;
    };

    UMLEditor.prototype.getClass = function(name) {
      var clss, k, len, ref;
      ref = this.classes;
      for (k = 0, len = ref.length; k < len; k++) {
        clss = ref[k];
        if (clss.name === name) {
          return clss;
        }
      }
      return null;
    };

    UMLEditor.prototype.showConnectionModal = function() {
      this.connectionModal.modal("show");
      return this;
    };

    UMLEditor.prototype.hideConnectionModal = function() {
      this.connectionModal.modal("hide");
      return this;
    };

    UMLEditor.prototype.showImportExportModal = function(value, format) {
      this.importExportModal.data("value", value);
      this.importExportModal.data("format", format);
      this.importExportModal.modal("show");
      return this;
    };

    UMLEditor.prototype.hideImportExportModal = function() {
      this.importExportModal.modal("hide");
      return this;
    };

    UMLEditor.prototype.showClassNamesOnly = function() {
      var clss, k, len, ref;
      ref = this.classes;
      for (k = 0, len = ref.length; k < len; k++) {
        clss = ref[k];
        clss.views["class"].showOverlay();
      }
      return this;
    };

    UMLEditor.prototype.showClassData = function() {
      var clss, k, len, ref;
      ref = this.classes;
      for (k = 0, len = ref.length; k < len; k++) {
        clss = ref[k];
        clss.views["class"].hideOverlay();
      }
      return this;
    };

    UMLEditor.prototype.draw = function() {
      var bbox, clss, connection, connectionType, height, initialScale, inner, k, l, len, len1, len2, len3, m, n, ref, ref1, ref2, render, self, source, svg, target, type, umlClasses, width, zoom;
      umlClasses = this.classes;
      this.resetSvg();
      this.graph = new dagreD3.graphlib.Graph({
        multigraph: true
      }).setGraph({});
      if (umlClasses.length === 0) {
        return this;
      }
      self = this;
      for (k = 0, len = umlClasses.length; k < len; k++) {
        clss = umlClasses[k];
        if ((ref = clss.views["class"].element) != null) {
          ref.remove();
        }
        clss.views["class"].draw();
        this.graph.setNode(clss.name, {
          shape: "umlClass",
          label: "",
          className: clss.name
        });
      }
      for (l = 0, len1 = umlClasses.length; l < len1; l++) {
        clss = umlClasses[l];
        ref1 = clss.outConnections;
        for (m = 0, len2 = ref1.length; m < len2; m++) {
          connection = ref1[m];
          source = connection.source;
          target = connection.target;
          type = connection.type;
          if (this.getClass(target) != null) {
            this.graph.setEdge(source, target, {
              arrowhead: type
            }, type + "_from_" + source + "_to_" + target);
          }
        }
      }
      svg = this.svg;
      inner = svg.select(".zoomer");
      zoom = d3.behavior.zoom().on("zoom", function() {
        inner.attr("transform", "translate(" + d3.event.translate + ") scale(" + d3.event.scale + ")");
        return true;
      });
      svg.call(zoom);
      this.graph.graph().rankdir = "BT";
      render = new dagreD3.render();
      render.shapes().umlClass = function(parent, bbox, node) {
        var elem, h, points, w;
        clss = self.getClass(node.className);
        elem = clss.views["class"].element;
        bbox = elem.node().getBBox();
        w = bbox.width;
        h = bbox.height;
        points = [
          {
            x: 0,
            y: 0
          }, {
            x: w,
            y: 0
          }, {
            x: w,
            y: -h
          }, {
            x: 0,
            y: -h
          }
        ];
        elem.attr("transform", "translate(" + (-w * 0.5) + ", " + (-h * 0.5) + ")");
        node.intersect = function(point) {
          return dagreD3.intersect.polygon(node, points, point);
        };
        parent.append(function() {
          return elem.node();
        });
        return elem;
      };
      ref2 = Object.keys(App.Connections).without("UMLConnection");
      for (n = 0, len3 = ref2.length; n < len3; n++) {
        connectionType = ref2[n];
        render.arrows()[connectionType] = App.Connections[connectionType].getArrowhead();
      }
      render(inner, this.graph);
      bbox = svg.node().getBBox();
      width = bbox.width;
      height = bbox.height;
      initialScale = 1;
      zoom.translate([(width - this.graph.graph().width * initialScale) / 2, 20]).scale(initialScale).event(svg);
      return this;
    };

    UMLEditor.prototype.serialize = function() {
      var clss;
      return (function() {
        var k, len, ref, results1;
        ref = this.classes;
        results1 = [];
        for (k = 0, len = ref.length; k < len; k++) {
          clss = ref[k];
          results1.push(clss.serialize());
        }
        return results1;
      }).call(this);
    };

    UMLEditor.prototype.deserialize = function(data) {
      var classData;
      this.classes = (function() {
        var k, len, results1;
        results1 = [];
        for (k = 0, len = data.length; k < len; k++) {
          classData = data[k];
          results1.push(App.UMLClass.fromJSON(this, classData));
        }
        return results1;
      }).call(this);
      return this;
    };

    UMLEditor.prototype.toJSON = function() {
      return JSON.stringify(this.serialize());
    };

    UMLEditor.prototype.fromJSON = function(json) {
      this.deserialize(JSON.parse(json));
      return this;
    };

    return UMLEditor;

  })();

  App.AbstractView = (function() {
    function AbstractView(model) {
      this.model = model;
    }

    AbstractView.appendDataToSVG = function(container, data) {
      var attrName, childData, element, k, len, ref, val;
      element = container.append(data.tag);
      for (attrName in data) {
        val = data[attrName];
        if (!(attrName !== "tag" && attrName !== "children")) {
          continue;
        }
        if (attrName === "class") {
          attrName = "classed";
        }
        if (attrName !== "classed") {
          (typeof element[attrName] === "function" ? element[attrName](val) : void 0) || element.attr(attrName, val);
        } else {
          element.classed(val, true);
        }
      }
      if (data.children != null) {
        ref = data.children;
        for (k = 0, len = ref.length; k < len; k++) {
          childData = ref[k];
          this.appendDataToSVG(element, childData);
        }
      }
      return container;
    };

    AbstractView.prototype.draw = function() {
      return this;
    };

    AbstractView.prototype.redraw = function(properties) {
      return this;
    };

    return AbstractView;

  })();

  App.UMLClass = (function() {
    function UMLClass(editor, name, attributes, methods, options) {
      var attribute, k, l, len, len1, method;
      for (k = 0, len = attributes.length; k < len; k++) {
        attribute = attributes[k];
        if (!attribute.visibility) {
          attribute.visibility = "public";
        }
      }
      for (l = 0, len1 = methods.length; l < len1; l++) {
        method = methods[l];
        if (!method.visibility) {
          method.visibility = "public";
        }
        if (!method.parameters) {
          method.parameters = [];
        }
      }
      this.editor = editor;
      this.name = name;
      this.type = null;
      this.attributes = attributes;
      this.methods = methods;
      this.isAbstract = options.isAbstract || false;
      this.isInterface = options.isInterface || false;
      this.outConnections = options.outConnections || [];
      this.views = {
        "class": new App.UMLClassView(this),
        edit: new App.UMLClassEditView(this)
      };
      Object.defineProperty(this.views, "all", {
        enumerable: false,
        writable: false,
        value: ["class", "edit"]
      });
    }

    UMLClass.fromJSON = function(editor, data) {
      var connection;
      return new this(editor, data.name, data.attributes, data.methods, {
        isAbstract: data.isAbstract,
        isInterface: data.isInterface,
        outConnections: (function() {
          var k, len, ref, results1;
          ref = data.outConnections;
          results1 = [];
          for (k = 0, len = ref.length; k < len; k++) {
            connection = ref[k];
            results1.push(App.Connections.UMLConnection.fromJSON(connection));
          }
          return results1;
        })()
      });
    };

    UMLClass.prototype.checkConnection = function(connection) {
      var c, id, k, l, len, len1, ref, ref1, type;
      id = connection.getId();
      ref = this.outConnections;
      for (k = 0, len = ref.length; k < len; k++) {
        c = ref[k];
        if (c.getId() === id) {
          throw new Error("Connection of that type already exists for class '" + this.name + "'");
        }
      }
      type = connection.type;
      if (type === "generalization" || type === "realization") {
        ref1 = this.editor.getClass(connection.target).outConnections;
        for (l = 0, len1 = ref1.length; l < len1; l++) {
          c = ref1[l];
          type = c.type;
          if ((type === "generalization" || type === "realization") && c.target === this.name) {
            throw new Error("Cyclic generalization or realization detected!");
          }
        }
      }
      return this;
    };

    UMLClass.prototype.addConnection = function(connection) {
      var err, error;
      try {
        this.checkConnection(connection);
        this.outConnections.push(connection);
      } catch (error) {
        err = error;
        console.error(err);
      }
      return this;
    };

    UMLClass.prototype.drawAll = function() {
      var name, ref, view;
      ref = this.views;
      for (name in ref) {
        view = ref[name];
        view.draw();
      }
      return this;
    };

    UMLClass.prototype.update = function(attributes, methods, options, viewsToUpdate) {
      var k, len, viewName;
      if (viewsToUpdate == null) {
        viewsToUpdate = this.views.all;
      }
      if (attributes != null) {
        this.attributes = attributes;
      }
      if (methods != null) {
        this.methods = methods;
      }
      this.isAbstract = options.isAbstract;
      this.isInterface = options.isInterface;
      for (k = 0, len = viewsToUpdate.length; k < len; k++) {
        viewName = viewsToUpdate[k];
        this.views[viewName].redraw();
      }
      return this;
    };

    UMLClass.prototype["delete"] = function() {
      var name, ref, view;
      ref = this.views;
      for (name in ref) {
        view = ref[name];
        view["delete"]();
      }
      return null;
    };

    UMLClass.prototype.enterEditMode = function() {
      this.views.edit.show();
      return true;
    };

    UMLClass.prototype.exitEditMode = function() {
      this.views.edit.hide();
      return true;
    };

    UMLClass.prototype.serialize = function() {
      var connection;
      return {
        name: this.name,
        attributes: this.attributes,
        methods: this.methods,
        isAbstract: this.isAbstract,
        isInterface: this.isInterface,
        outConnections: (function() {
          var k, len, ref, results1;
          ref = this.outConnections;
          results1 = [];
          for (k = 0, len = ref.length; k < len; k++) {
            connection = ref[k];
            results1.push(connection.serialize());
          }
          return results1;
        }).call(this)
      };
    };

    UMLClass.prototype.deserialize = function(data) {
      this.name = data.name;
      this.attributes = data.attributes;
      this.methods = data.methods;
      this.isAbstract = data.isAbstract;
      this.isInterface = data.isInterface;
      this.outConnections = data.outConnections;
      return this;
    };

    return UMLClass;

  })();

  App.UMLClassView = (function(superClass) {
    var textWidthDummy;

    extend(UMLClassView, superClass);

    textWidthDummy = null;

    function UMLClassView(model) {
      UMLClassView.__super__.constructor.call(this, model);
      this.element = null;
      this.id = this._getId();
      this.settings = {
        showVisibility: true,
        showTypes: true
      };
    }

    UMLClassView.prototype["delete"] = function() {
      this.element.remove();
      return null;
    };

    UMLClassView.prototype._calculateWidth = function(name, stringifiedAttributes, stringifiedMethods, clss) {
      var attribute, k, l, len, len1, maxWidth, method, style, width;
      if (stringifiedAttributes == null) {
        stringifiedAttributes = "";
      }
      if (stringifiedMethods == null) {
        stringifiedMethods = "";
      }
      if (clss == null) {
        clss = "text";
      }
      style = {
        position: "absolute",
        visibility: "hidden"
      };
      if (textWidthDummy == null) {
        textWidthDummy = $("<div id='textWidthDummy' />");
        $(document.body).append(textWidthDummy);
      }
      textWidthDummy.css(style);
      if (clss != null) {
        textWidthDummy.addClass(clss);
      }
      maxWidth = 0;
      width = 0;
      textWidthDummy.text(name);
      if ((width = textWidthDummy.width()) > maxWidth) {
        maxWidth = width;
      }
      for (k = 0, len = stringifiedAttributes.length; k < len; k++) {
        attribute = stringifiedAttributes[k];
        textWidthDummy.text(attribute);
        if ((width = textWidthDummy.width()) > maxWidth) {
          maxWidth = width;
        }
      }
      for (l = 0, len1 = stringifiedMethods.length; l < len1; l++) {
        method = stringifiedMethods[l];
        textWidthDummy.text(method);
        if ((width = textWidthDummy.width()) > maxWidth) {
          maxWidth = width;
        }
      }
      return maxWidth + 10;
    };

    UMLClassView.prototype.adjustSize = function() {
      return this;
    };

    UMLClassView.prototype._getId = function() {
      return this.model.name._idSafe()._idUnique();
    };

    UMLClassView.prototype._createElements = function(container) {
      var data;
      data = {
        tag: "g",
        "class": "uml class",
        id: this.id,
        children: [
          {
            tag: "g",
            "class": "name part",
            children: [
              {
                tag: "rect",
                "class": "rect"
              }, {
                tag: "text",
                "class": "text",
                y: "1em",
                children: [
                  {
                    tag: "tspan",
                    "class": "keywords"
                  }, {
                    tag: "tspan",
                    "font-weight": "bold",
                    "class": "name",
                    dy: "1.2em"
                  }, {
                    tag: "tspan",
                    "class": "properties",
                    dy: "1.2em"
                  }
                ]
              }, {
                tag: "text",
                "class": "edit",
                "font-family": "'Glyphicons Halflings'",
                "font-size": "13px",
                html: "\u270f",
                y: 16
              }
            ]
          }, {
            tag: "g",
            "class": "attributes part",
            children: [
              {
                tag: "rect",
                "class": "rect"
              }, {
                tag: "text",
                "class": "text",
                y: "1em"
              }
            ]
          }, {
            tag: "g",
            "class": "methods part",
            children: [
              {
                tag: "rect",
                "class": "rect"
              }, {
                tag: "text",
                "class": "text",
                y: "1em"
              }
            ]
          }, {
            tag: "g",
            "class": "overlayWrapper",
            children: [
              {
                tag: "rect",
                "class": "overlay"
              }, {
                tag: "text",
                "class": "text",
                y: "1em"
              }
            ]
          }
        ]
      };
      container = App.AbstractView.appendDataToSVG(container, data);
      return container.select("#" + this.id);
    };

    UMLClassView.prototype._bindEvents = function() {
      var element, overlayWrapper, self;
      self = this;
      element = this.element;
      this.element.select(".edit").on("click", function() {
        self.model.enterEditMode();
        return true;
      });
      overlayWrapper = this.element.select(".overlayWrapper");
      overlayWrapper.on("click", function() {
        var isActive;
        isActive = self.model.editor.dataCollector.toggleData(overlayWrapper.select(".text").text());
        overlayWrapper.classed("selected", isActive);
        return true;
      });
      return this;
    };

    UMLClassView.prototype._paramsToString = function(parameters) {
      var k, len, param, res, suffix;
      if (!parameters || parameters.length === 0) {
        return "";
      }
      res = [];
      for (k = 0, len = parameters.length; k < len; k++) {
        param = parameters[k];
        if (param.type != null) {
          suffix = ": " + param.type;
        } else {
          suffix = "";
        }
        res.push("" + param.name + suffix);
      }
      return res.join(", ");
    };

    UMLClassView.prototype._attributeToString = function(attribute) {
      var suffix, visibility;
      visibility = attribute.visibility || "public";
      if (attribute.type != null) {
        suffix = ": " + attribute.type;
      } else {
        suffix = "";
      }
      return ((this._visibilityToString(visibility)) + " " + attribute.name + suffix).trim();
    };

    UMLClassView.prototype._methodToString = function(method) {
      var suffix;
      if (method.name != null) {
        if (method.type != null) {
          suffix = ": " + method.type;
        } else {
          suffix = "";
        }
        return ((this._visibilityToString(method.visibility)) + " " + method.name + "(" + (this._paramsToString(method.parameters)) + ")" + suffix).trim();
      }
      if (method.last === ")") {
        return "+ " + method;
      }
      return "+ " + method + "()";
    };

    UMLClassView.prototype._visibilityToString = function(visibility) {
      var mapper;
      mapper = {
        "public": "+",
        "protected": "#",
        "package": "~",
        "private": "-"
      };
      return mapper[visibility.toLowerCase()];
    };

    UMLClassView.prototype.showOverlay = function() {
      this.element.select(".overlayWrapper").style("display", "block");
      return this;
    };

    UMLClassView.prototype.hideOverlay = function() {
      this.element.select(".overlayWrapper").style("display", "none");
      return this;
    };

    UMLClassView.prototype.draw = function(x, y) {
      var attribute, height, isAbstract, isInterface, lineHeight, lineSpacing, method, name, offset, stringifiedAttributes, stringifiedMethods, totalHeight, w;
      this.element = this._createElements(this.model.editor.svg);
      stringifiedAttributes = (function() {
        var k, len, ref, results1;
        ref = this.model.attributes;
        results1 = [];
        for (k = 0, len = ref.length; k < len; k++) {
          attribute = ref[k];
          results1.push(this._attributeToString(attribute));
        }
        return results1;
      }).call(this);
      stringifiedMethods = (function() {
        var k, len, ref, results1;
        ref = this.model.methods;
        results1 = [];
        for (k = 0, len = ref.length; k < len; k++) {
          method = ref[k];
          results1.push(this._methodToString(method));
        }
        return results1;
      }).call(this);
      name = this.model.name;
      w = this._calculateWidth(name, stringifiedAttributes, stringifiedMethods);
      totalHeight = 0;
      lineHeight = 18;
      lineSpacing = 3;
      offset = {
        left: 4,
        right: 0
      };
      w += offset.left + offset.right;
      y = 0;
      isInterface = this.model.isInterface;
      isAbstract = this.model.isAbstract;
      height = lineHeight * 3;
      totalHeight += height;
      this.element.classed(this.model.type, true);
      this.element.selectAll(".part .rect").attr("width", w);
      this.element.select(".name .rect").attr("height", height);
      if (isInterface) {
        this.element.select(".name .text .keywords").text("<<interface>>").attr("x", (w - this._calculateWidth("<<interface>>")) / 2);
      }
      this.element.select(".name .text .name").text(name).attr("x", (w - this._calculateWidth(name)) / 2);
      if (isAbstract) {
        this.element.select(".name .text .properties").text("{abstract}").attr("x", (w - this._calculateWidth("{abstract}")) / 2);
      }
      this.element.select(".name .edit").attr("x", w - 19);
      y += height;
      height = this.model.attributes.length * (lineHeight + lineSpacing);
      totalHeight += height;
      this.element.select(".attributes").attr("transform", "translate(0, " + y + ")");
      this.element.select(".attributes .rect").attr("height", height);
      this.element.select(".attributes .text").selectAll("tspan").data((function() {
        var k, len, results1;
        results1 = [];
        for (k = 0, len = stringifiedAttributes.length; k < len; k++) {
          attribute = stringifiedAttributes[k];
          results1.push({
            text: attribute
          });
        }
        return results1;
      })()).enter().append("tspan").text(function(d) {
        return d.text;
      }).attr("x", offset.left).attr("dy", function(d, i) {
        if (i > 0) {
          return lineHeight + lineSpacing;
        }
        return 0;
      });
      y += height;
      height = this.model.methods.length * (lineHeight + lineSpacing);
      totalHeight += height;
      this.element.select(".methods").attr("transform", "translate(0, " + y + ")");
      this.element.select(".methods .rect").attr("height", height);
      this.element.select(".methods .text").selectAll("tspan").data((function() {
        var k, len, results1;
        results1 = [];
        for (k = 0, len = stringifiedMethods.length; k < len; k++) {
          method = stringifiedMethods[k];
          results1.push({
            text: method
          });
        }
        return results1;
      })()).enter().append("tspan").text(function(d) {
        return d.text;
      }).attr("x", offset.left).attr("dy", function(d, i) {
        if (i > 0) {
          return lineHeight + lineSpacing;
        }
        return 0;
      });
      this.element.select(".overlay").attr("width", w).attr("height", totalHeight);
      this.element.select(".overlayWrapper .text").text(name).attr("x", (w - this._calculateWidth(name)) / 2).attr("y", totalHeight / 2);
      this._bindEvents();
      return this;
    };

    return UMLClassView;

  })(App.AbstractView);

  App.UMLClassEditView = (function(superClass) {
    extend(UMLClassEditView, superClass);

    function UMLClassEditView(model) {
      UMLClassEditView.__super__.constructor.call(this, model);
      this.div = App.Templates.get("editUMLClass", {
        className: this.model.name,
        isAbstract: this.model.isAbstract,
        isInterface: this.model.isInterface
      }, this);
      this.draw();
      $(document.body).append(this.div);
      this.hide();
    }

    UMLClassEditView.prototype["delete"] = function() {
      this.div.remove();
      return null;
    };

    UMLClassEditView.prototype._getInput = function() {
      var attributes, generalOptions, methods;
      generalOptions = {};
      attributes = [];
      methods = [];
      generalOptions.isAbstract = this.div.find(".general .abstractCheckbox").prop("checked");
      generalOptions.isInterface = this.div.find(".general .interfaceCheckbox").prop("checked");
      this.div.find(".attributes .form-group").each(function(elem, idx) {
        var formGroup;
        formGroup = $(this);
        attributes.push({
          name: formGroup.find(".name").val(),
          type: formGroup.find(".type").val(),
          visibility: formGroup.find(".visibility").val(),
          "default": formGroup.find(".nullCheckbox").prop("checked") ? null : formGroup.find(".default").val()
        });
        return true;
      });
      this.div.find(".methods .form-group").each(function() {
        var formGroup, parameters;
        formGroup = $(this);
        parameters = [];
        formGroup.find(".row.parameter").each(function() {
          var paramRow;
          paramRow = $(this);
          parameters.push({
            name: paramRow.find(".name").val(),
            type: paramRow.find(".type").val(),
            "default": paramRow.find(".nullCheckbox").prop("checked") ? null : paramRow.find(".default").val()
          });
          return true;
        });
        methods.push({
          name: formGroup.find(".name").val(),
          type: formGroup.find(".type").val(),
          visibility: formGroup.find(".visibility").val(),
          parameters: parameters
        });
        return true;
      });
      return {
        generalOptions: generalOptions,
        attributes: attributes,
        methods: methods
      };
    };

    UMLClassEditView.prototype._createParamRow = function(param) {
      return App.Templates.getHTML("editUMLClassParamRow", {
        name: param.name,
        type: param.type,
        "default": param["default"] || ""
      });
    };

    UMLClassEditView.prototype._createParamList = function(method) {
      var param;
      return App.Templates.getHTML("editUMLClassParamList", {
        parameters: (function() {
          var k, len, ref, results1;
          ref = method.parameters || [];
          results1 = [];
          for (k = 0, len = ref.length; k < len; k++) {
            param = ref[k];
            results1.push(App.Templates.getHTML("editUMLClassParamRow", param));
          }
          return results1;
        })()
      });
    };

    UMLClassEditView.prototype._createFormRow = function(property, isAttribute) {
      var id, paramList, paramValue, self;
      if (isAttribute == null) {
        isAttribute = true;
      }
      self = this;
      id = ("id_" + (this.model.name._idSafe()) + "_" + (property.name._idSafe()))._idUnique();
      if (isAttribute) {
        paramValue = {
          "default": property["default"] || "",
          checked: property["default"] != null ? "" : "checked"
        };
      } else {
        paramList = {
          list: this._createParamList(property)
        };
      }
      return App.Templates.get("editUMLClassFormRow", {
        id: id,
        name: property.name,
        type: property.type,
        "default": property["default"] || "",
        isAttribute: isAttribute,
        select: {
          "public": property.visibility === "public" ? "selected" : "",
          "private": property.visibility === "private" ? "selected" : "",
          "protected": property.visibility === "protected" ? "selected" : "",
          "package": property.visibility === "package" ? "selected" : ""
        },
        paramValue: paramValue,
        paramList: paramList
      }, id, property);
    };

    UMLClassEditView.prototype.draw = function() {
      var attribute, body, k, l, len, len1, method, ref, ref1;
      this.div.find(".modal-title .className").text(this.model.name);
      this.div.find(".general .abstractCheckbox").prop("checked", this.model.isAbstract);
      this.div.find(".general .interfaceCheckbox").prop("checked", this.model.isInterface);
      body = this.div.find(".modal-body .attributes form").empty();
      ref = this.model.attributes;
      for (k = 0, len = ref.length; k < len; k++) {
        attribute = ref[k];
        body.append(this._createFormRow(attribute, true));
      }
      body = this.div.find(".modal-body .methods form").empty();
      ref1 = this.model.methods;
      for (l = 0, len1 = ref1.length; l < len1; l++) {
        method = ref1[l];
        body.append(this._createFormRow(method, false));
      }
      return this;
    };

    UMLClassEditView.prototype.redraw = function() {
      return this.draw();
    };

    UMLClassEditView.prototype.show = function() {
      this.div.modal("show");
      return this;
    };

    UMLClassEditView.prototype.hide = function() {
      this.div.modal("hide");
      return this;
    };

    return UMLClassEditView;

  })(App.AbstractView);

  App.Model = (function(superClass) {
    extend(Model, superClass);

    function Model(editor, name, attributes, methods, options) {
      if (options == null) {
        options = {};
      }
      Model.__super__.constructor.call(this, editor, name, attributes, methods, options);
      this.type = "model";
    }

    return Model;

  })(App.UMLClass);

  App.View = (function(superClass) {
    extend(View, superClass);

    function View(editor, name, attributes, methods, options) {
      if (options == null) {
        options = {};
      }
      View.__super__.constructor.call(this, editor, name, attributes, methods, options);
      this.type = "view";
    }

    return View;

  })(App.UMLClass);

  App.Controller = (function(superClass) {
    extend(Controller, superClass);

    function Controller(editor, name, attributes, methods, options) {
      if (options == null) {
        options = {};
      }
      Controller.__super__.constructor.call(this, editor, name, attributes, methods, options);
      this.type = "controller";
    }

    return Controller;

  })(App.UMLClass);

  App.UMLMultiplicity = (function() {
    function UMLMultiplicity(min, max) {
      if (min == null) {
        min = Infinity;
      }
      if (max == null) {
        max = Infinity;
      }
      this.min = min;
      this.max = max;
    }

    UMLMultiplicity.fromJSON = function(data) {
      return new this(parseFloat(data.min), parseFloat(data.max));
    };

    UMLMultiplicity.prototype.valToStr = function(val) {
      if (val === Infinity) {
        return "*";
      }
      return "" + val;
    };

    UMLMultiplicity.prototype.toString = function() {
      if (this.min !== this.max) {
        return (this.valToStr(this.min)) + ".." + (this.valToStr(this.max));
      }
      return "" + (this.valToStr(this.min));
    };

    UMLMultiplicity.prototype.serialize = function() {
      return {
        min: "" + this.min,
        max: "" + this.max
      };
    };

    return UMLMultiplicity;

  })();

  App.Connections.UMLConnection = (function() {
    function UMLConnection(source, target, sourceMultiplicity, targetMultiplicity) {
      this.source = source;
      this.target = target;
      this.type = this.constructor.name;
      this.multiplicities = {
        source: sourceMultiplicity || new App.UMLMultiplicity(),
        target: targetMultiplicity || new App.UMLMultiplicity()
      };
    }

    UMLConnection.fromJSON = function(data) {
      return new App.Connections[data.type](data.source, data.target, App.UMLMultiplicity.fromJSON(data.multiplicities.source), App.UMLMultiplicity.fromJSON(data.multiplicities.target));
    };

    UMLConnection.getArrowhead = function() {
      throw new Error("Implment me!");
    };

    UMLConnection.prototype.getId = function() {
      return this.type + "-" + this.source + "-" + this.target;
    };

    UMLConnection.prototype.serialize = function() {
      return {
        source: this.source,
        target: this.target,
        type: this.type,
        multiplicities: {
          source: this.multiplicities.source.serialize(),
          target: this.multiplicities.target.serialize()
        }
      };
    };

    return UMLConnection;

  })();

  App.Connections.Generalization = (function(superClass) {
    extend(Generalization, superClass);

    function Generalization() {
      return Generalization.__super__.constructor.apply(this, arguments);
    }

    Generalization.getArrowhead = function() {
      return function(parent, id, edge, type) {
        var marker, path;
        marker = parent.append("marker").attr("id", id).attr("viewBox", "0 0 10 15").attr("refX", 11).attr("refY", 7.5).attr("markerUnits", "strokeWidth").attr("markerWidth", 12).attr("markerHeight", 15).attr("orient", "auto");
        path = marker.append("path").attr("d", "M 0 0 L 10 7.5 L 0 15 z").style("stroke-width", 1).style("fill", "#fff").style("stroke", "#000");
        dagreD3.util.applyStyle(path, edge[type + "Style"]);
        return parent;
      };
    };

    return Generalization;

  })(App.Connections.UMLConnection);

  App.Connections.Realization = (function(superClass) {
    extend(Realization, superClass);

    function Realization() {
      return Realization.__super__.constructor.apply(this, arguments);
    }

    Realization.getArrowhead = function() {
      return function(parent, id, edge, type) {
        var marker, path;
        marker = parent.append("marker").attr("id", id).attr("viewBox", "0 0 10 15").attr("refX", 11).attr("refY", 7.5).attr("markerUnits", "strokeWidth").attr("markerWidth", 12).attr("markerHeight", 15).attr("orient", "auto");
        path = marker.append("path").attr("d", "M 0 0 L 10 7.5 L 0 15 z").style("stroke-width", 1).style("fill", "#fff").style("stroke", "#000");
        d3.select(edge.elem).select("path").style("stroke-dasharray", "5, 5");
        dagreD3.util.applyStyle(path, edge[type + "Style"]);
        return parent;
      };
    };

    return Realization;

  })(App.Connections.UMLConnection);

  App.Connections.Aggregation = (function(superClass) {
    extend(Aggregation, superClass);

    function Aggregation() {
      return Aggregation.__super__.constructor.apply(this, arguments);
    }

    Aggregation.getArrowhead = function() {
      return function(parent, id, edge, type) {
        var marker, path;
        marker = parent.append("marker").attr("id", id).attr("viewBox", "0 0 20 15").attr("refX", 21).attr("refY", 7.5).attr("markerUnits", "strokeWidth").attr("markerWidth", 12).attr("markerHeight", 15).attr("orient", "auto");
        path = marker.append("path").attr("d", "M 10 0 L 20 7.5 L 10 15 L 0 7.5 z").style("stroke-width", 1).style("fill", "#fff").style("stroke", "#000");
        dagreD3.util.applyStyle(path, edge[type + "Style"]);
        return parent;
      };
    };

    return Aggregation;

  })(App.Connections.UMLConnection);

  App.Connections.Association = (function(superClass) {
    extend(Association, superClass);

    function Association() {
      return Association.__super__.constructor.apply(this, arguments);
    }

    Association.getArrowhead = function() {
      return function(parent, id, edge, type) {};
    };

    return Association;

  })(App.Connections.UMLConnection);

  App.Connections.Composition = (function(superClass) {
    extend(Composition, superClass);

    function Composition() {
      return Composition.__super__.constructor.apply(this, arguments);
    }

    Composition.getArrowhead = function() {
      return function(parent, id, edge, type) {
        var marker, path;
        marker = parent.append("marker").attr("id", id).attr("viewBox", "0 0 20 15").attr("refX", 21).attr("refY", 7.5).attr("markerUnits", "strokeWidth").attr("markerWidth", 12).attr("markerHeight", 15).attr("orient", "auto");
        path = marker.append("path").attr("d", "M 10 0 L 20 7.5 L 10 15 L 0 7.5 z").style("stroke-width", 1).style("fill", "#000").style("stroke", "#000");
        dagreD3.util.applyStyle(path, edge[type + "Style"]);
        return parent;
      };
    };

    return Composition;

  })(App.Connections.UMLConnection);

}).call(this);
