// Generated by CoffeeScript 1.10.0
(function() {
  var calculateHeight, calculateWidth, stringifyAttribute, stringifyMethod, stringifyParameters, stringifyVisibility, textWidthDummy,
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  window.DEBUG = true;

  window.App = {
    Configurators: {}
  };

  App.AbstractView = (function() {
    function AbstractView(model, container) {
      this.model = model;
      this.container = container;
    }

    AbstractView.appendDataToSVG = function(container, data) {
      var attrName, childData, element, j, len, ref, val;
      element = container.append(data.tag);
      for (attrName in data) {
        val = data[attrName];
        if (!(attrName !== "tag" && attrName !== "children")) {
          continue;
        }
        if (attrName === "class") {
          attrName = "classed";
        }
        if (attrName !== "classed") {
          (typeof element[attrName] === "function" ? element[attrName](val) : void 0) || element.attr(attrName, val);
        } else {
          element.classed(val, true);
        }
      }
      if (data.children != null) {
        ref = data.children;
        for (j = 0, len = ref.length; j < len; j++) {
          childData = ref[j];
          this.appendDataToSVG(element, childData);
        }
      }
      return container;
    };

    AbstractView.prototype.draw = function() {
      return this;
    };

    AbstractView.prototype.redraw = function(properties) {
      return this;
    };

    return AbstractView;

  })();

  App.UMLClass = (function() {
    function UMLClass(name, attributes, methods) {
      var ref, view;
      this.name = name;
      this.attributes = attributes;
      this.methods = methods;
      this.views = {
        "class": new App.UMLClassView(this, d3.select("svg")),
        edit: new App.UMLClassEditView(this)
      };
      ref = this.views;
      for (name in ref) {
        view = ref[name];
        view.draw();
      }
    }

    UMLClass.prototype.update = function(properties) {
      var key, name, ref, val, view;
      if (properties == null) {
        properties = {};
      }
      for (key in properties) {
        val = properties[key];
        this[key] = val;
      }
      ref = this.views;
      for (name in ref) {
        view = ref[name];
        view.redraw(properties);
      }
      return this;
    };

    return UMLClass;

  })();

  stringifyVisibility = function(visibility) {
    var mapper;
    if (visibility == null) {
      visibility = "public";
    }
    mapper = {
      "public": "+",
      "protected": "#",
      "package": "~",
      "private": "-"
    };
    return mapper[visibility.toLowerCase()];
  };

  stringifyParameters = function(parameters) {
    var j, len, param, res, suffix;
    if (!parameters || parameters.length === 0) {
      return "";
    }
    res = [];
    for (j = 0, len = parameters.length; j < len; j++) {
      param = parameters[j];
      if (param.type != null) {
        suffix = ": " + param.type;
      } else {
        suffix = "";
      }
      res.push("" + param.name + suffix);
    }
    return res.join(", ");
  };

  stringifyAttribute = function(attribute) {
    var suffix;
    if (attribute.name != null) {
      if (attribute.visibility == null) {
        attribute.visibility = "public";
      }
      if (attribute.type != null) {
        suffix = ": " + attribute.type;
      } else {
        suffix = "";
      }
      return ((stringifyVisibility(attribute.visibility)) + " " + attribute.name + suffix).trim();
    }
    return "+ " + attribute;
  };

  stringifyMethod = function(method) {
    var suffix;
    if (method.name != null) {
      if (method.type != null) {
        suffix = ": " + method.type;
      } else {
        suffix = "";
      }
      return ((stringifyVisibility(method.visibility)) + " " + method.name + "(" + (stringifyParameters(method.parameters)) + ")" + suffix).trim();
    }
    if (method[method.length - 1] === ")") {
      return "+ " + method;
    }
    return "+ " + method + "()";
  };

  calculateHeight = function(name, attributes, methods) {
    return (attributes.length + methods.length) * 14 + 35;
  };

  textWidthDummy = null;

  calculateWidth = function(name, stringifiedAttributes, stringifiedMethods, clss) {
    var attribute, j, k, len, len1, maxWidth, method, style, width;
    if (stringifiedAttributes == null) {
      stringifiedAttributes = "";
    }
    if (stringifiedMethods == null) {
      stringifiedMethods = "";
    }
    if (clss == null) {
      clss = "text";
    }
    style = {
      position: "absolute",
      visibility: "hidden"
    };
    if (textWidthDummy == null) {
      textWidthDummy = $("<div id='textWidthDummy' />");
      $(document.body).append(textWidthDummy);
    }
    textWidthDummy.css(style);
    if (clss != null) {
      textWidthDummy.addClass(clss);
    }
    maxWidth = 0;
    width = 0;
    textWidthDummy.text(name);
    if ((width = textWidthDummy.width()) > maxWidth) {
      maxWidth = width;
    }
    for (j = 0, len = stringifiedAttributes.length; j < len; j++) {
      attribute = stringifiedAttributes[j];
      textWidthDummy.text(attribute);
      if ((width = textWidthDummy.width()) > maxWidth) {
        maxWidth = width;
      }
    }
    for (k = 0, len1 = stringifiedMethods.length; k < len1; k++) {
      method = stringifiedMethods[k];
      textWidthDummy.text(method);
      if ((width = textWidthDummy.width()) > maxWidth) {
        maxWidth = width;
      }
    }
    return maxWidth + 10;
  };

  App.UMLClassView = (function(superClass) {
    extend(UMLClassView, superClass);

    function UMLClassView(model, container) {
      UMLClassView.__super__.constructor.call(this, model, container);
      this.element = null;
    }

    UMLClassView.prototype.adjustSize = function() {
      return this;
    };

    UMLClassView.prototype._createElements = function(container) {
      var data;
      data = {
        tag: "g",
        "class": "uml class",
        children: [
          {
            tag: "g",
            "class": "name part",
            children: [
              {
                tag: "rect",
                "class": "rect"
              }, {
                tag: "text",
                "class": "text"
              }
            ]
          }, {
            tag: "g",
            "class": "attributes part",
            children: [
              {
                tag: "rect",
                "class": "rect"
              }, {
                tag: "text",
                "class": "text"
              }
            ]
          }, {
            tag: "g",
            "class": "methods part",
            children: [
              {
                tag: "rect",
                "class": "rect"
              }, {
                tag: "text",
                "class": "text"
              }
            ]
          }
        ]
      };
      container = App.AbstractView.appendDataToSVG(container, data);
      container.select("*").attr("transform", "translate(0,0)");
      return container;
    };

    UMLClassView.prototype._bindEvents = function(container) {
      var drag;
      drag = d3.behavior.drag().origin(function(d, i) {
        var elem, translation;
        elem = d3.select(this);
        translation = d3.transform(elem.attr("transform")).translate;
        return {
          x: elem.attr("x") + translation[0],
          y: elem.attr("y") + translation[1]
        };
      }).on("drag", function() {
        var elem, evt;
        evt = d3.event;
        elem = d3.select(this);
        elem.attr("transform", "translate(" + evt.x + ", " + evt.y + ")");
        return true;
      });
      container.select(".uml.class").call(drag);
      return this;
    };

    UMLClassView.prototype.draw = function(x, y) {
      var attribute, h, height, lineHeight, lineSpacing, method, offset, stringifiedAttributes, stringifiedMethods, w;
      this._createElements(this.container);
      stringifiedAttributes = (function() {
        var j, len, ref, results;
        ref = this.model.attributes;
        results = [];
        for (j = 0, len = ref.length; j < len; j++) {
          attribute = ref[j];
          results.push(stringifyAttribute(attribute));
        }
        return results;
      }).call(this);
      stringifiedMethods = (function() {
        var j, len, ref, results;
        ref = this.model.methods;
        results = [];
        for (j = 0, len = ref.length; j < len; j++) {
          method = ref[j];
          results.push(stringifyMethod(method));
        }
        return results;
      }).call(this);
      w = calculateWidth(this.model.name, stringifiedAttributes, stringifiedMethods);
      h = calculateHeight(this.model.name, this.model.attributes, this.model.methods);
      y = 0;
      height = 20;
      lineHeight = 18;
      lineSpacing = 3;
      offset = {
        left: 4,
        right: 0
      };
      w += offset.left + offset.right;
      this.container.selectAll(".part .rect").attr("width", w);
      this.container.select(".name .rect").attr("height", height);
      this.container.select(".name .text").text(this.model.name).attr("x", (w - calculateWidth(this.model.name)) / 2).attr("y", height / 2 + 3).attr("font-weight", "bold");
      y += height;
      height = this.model.attributes.length * (lineHeight + lineSpacing);
      this.container.select(".attributes").attr("transform", "translate(0, " + y + ")");
      this.container.select(".attributes .rect").attr("height", height);
      this.container.select(".attributes .text").attr("y", "1em").selectAll("tspan").data((function() {
        var j, len, results;
        results = [];
        for (j = 0, len = stringifiedAttributes.length; j < len; j++) {
          attribute = stringifiedAttributes[j];
          results.push({
            text: attribute
          });
        }
        return results;
      })()).enter().append("tspan").text(function(d) {
        return d.text;
      }).attr("x", offset.left).attr("dy", function(d, i) {
        if (i > 0) {
          return lineHeight + lineSpacing;
        }
        return 0;
      });
      y += height;
      height = this.model.methods.length * (lineHeight + lineSpacing);
      this.container.select(".methods").attr("transform", "translate(0, " + y + ")");
      this.container.select(".methods .rect").attr("height", height);
      this.container.select(".methods .text").attr("y", "1em").selectAll("tspan").data((function() {
        var j, len, results;
        results = [];
        for (j = 0, len = stringifiedMethods.length; j < len; j++) {
          method = stringifiedMethods[j];
          results.push({
            text: method
          });
        }
        return results;
      })()).enter().append("tspan").text(function(d) {
        return d.text;
      }).attr("x", offset.left).attr("dy", function(d, i) {
        if (i > 0) {
          return lineHeight + lineSpacing;
        }
        return 0;
      });
      this._bindEvents(this.container);
      return this;
    };

    UMLClassView.prototype.redraw = function(properties) {
      if (properties == null) {
        this.element.remove();
        this.draw();
        return this;
      }
      return this;
    };

    return UMLClassView;

  })(App.AbstractView);

  App.UMLClassEditView = (function(superClass) {
    extend(UMLClassEditView, superClass);

    function UMLClassEditView(model, container) {
      UMLClassEditView.__super__.constructor.call(this, model, container);
    }

    UMLClassEditView.prototype.draw = function() {
      return this;
    };

    UMLClassEditView.prototype.redraw = function(properties) {
      return this;
    };

    return UMLClassEditView;

  })(App.AbstractView);

}).call(this);
