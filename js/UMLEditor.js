// Generated by CoffeeScript 1.10.0
(function() {
  var calculateHeight, calculateWidth, stringifyAttribute, stringifyMethod, stringifyParameters, stringifyVisibility, textWidthDummy,
    indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; },
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  window.DEBUG = true;

  window.App = {
    Templates: {}
  };

  String.prototype._idSafe = function() {
    return this.replace(/([\u0080-\uffff]|\s+)/g, "_");
  };

  String.prototype._idUnique = function() {
    var i, orig, str;
    orig = this;
    str = orig;
    i = 0;
    while (document.getElementById(str)) {
      str = orig + "-" + (i++);
    }
    return "" + str;
  };

  String.prototype._capitalize = function() {
    return this[0].toUpperCase() + this.slice(1);
  };

  String.prototype.contains = function(needle) {
    return this.indexOf(needle) >= 0;
  };

  Array.prototype.without = function(elem) {
    var e;
    return (function() {
      var j, len, results;
      results = [];
      for (j = 0, len = this.length; j < len; j++) {
        e = this[j];
        if (e !== elem) {
          results.push(e);
        }
      }
      return results;
    }).call(this);
  };

  Array.prototype.remove = function(elem) {
    var idx;
    idx = this.indexOf(elem);
    if (idx >= 0) {
      this.splice(idx, 1);
    }
    return this;
  };

  Object.defineProperties(Array.prototype, {
    first: {
      get: function() {
        return this[0];
      },
      set: function(v) {
        this[0] = v;
        return this;
      }
    },
    second: {
      get: function() {
        return this[1];
      },
      set: function(v) {
        this[1] = v;
        return this;
      }
    },
    last: {
      get: function() {
        return this[this.length - 1];
      },
      set: function(v) {
        this[this.length - 1] = v;
        return this;
      }
    }
  });

  App.Templates.navbar = "<nav class=\"navbar navbar-default\">\n<div class=\"container-fluid\">\n    <div class=\"navbar-header\">\n        <a class=\"navbar-brand\" href=\"#\">UMLEditor</a>\n    </div>\n\n    <div class=\"collapse navbar-collapse\" id=\"bs-example-navbar-collapse-1\">\n        <ul class=\"nav navbar-nav\">\n            <li>\n                <a href=\"#\">\n                    <span class=\"label label-primary label-lg\">\n                        New class &nbsp;\n                        <span class=\"glyphicon glyphicon-plus\"></span>\n                    </span>\n                </a>\n            </li>\n            <li>\n                <a href=\"#\">\n                    <span class=\"label label-primary label-lg\">\n                        Connect classes &nbsp;\n                        <span class=\"glyphicon glyphicon-link\"></span>\n                    </span>\n                </a>\n            </li>\n            <li>\n                <a href=\"#\">\n                    <span class=\"label label-primary label-lg\">\n                        Arrange &nbsp;\n                        <span class=\"glyphicon glyphicon-transfer\"></span>\n                    </span>\n                </a>\n            </li>\n            <!-- <li class=\"dropdown\">\n                <a href=\"#\" class=\"dropdown-toggle\" data-toggle=\"dropdown\" role=\"button\" aria-haspopup=\"true\" aria-expanded=\"false\">Dropdown <span class=\"caret\"></span></a>\n                <ul class=\"dropdown-menu\">\n                    <li><a href=\"#\">Action</a></li>\n                    <li><a href=\"#\">Another action</a></li>\n                    <li><a href=\"#\">Something else here</a></li>\n                    <li role=\"separator\" class=\"divider\"></li>\n                    <li><a href=\"#\">Separated link</a></li>\n                    <li role=\"separator\" class=\"divider\"></li>\n                    <li><a href=\"#\">One more separated link</a></li>\n                </ul>\n            </li> -->\n        </ul>\n        <ul class=\"nav navbar-nav navbar-right\">\n            <form class=\"navbar-form\" role=\"search\">\n                <div class=\"form-group relative\">\n                    <input type=\"text\" class=\"form-control search\" placeholder=\"Search classes\">\n                    <button type=\"button\" class=\"close\" title=\"Clear search\">\n                        <span>&times;</span>\n                    </button>\n                </div>\n            </form>\n        </ul>\n    </div>\n</div>\n</nav>";

  App.Templates.svg = "<div class=\"svgWrapper\">\n<svg class=\"uml\">\n    <rect class=\"background\" width=\"100%\" height=\"100%\"></rect>\n    <g class=\"zoomer\"></g>\n</svg>\n</div>";

  App.UMLEditor = (function() {
    function UMLEditor() {
      var closeBtn, d3svg, navbar, searchBar, self, svg;
      self = this;
      navbar = $(Mustache.to_html(App.Templates.navbar));
      svg = $(Mustache.to_html(App.Templates.svg));
      d3svg = d3.select(svg.find("svg.uml")[0]);
      this.svg = d3svg;
      searchBar = navbar.find(".search");
      closeBtn = searchBar.siblings(".close");
      searchBar.keyup(function(evt) {
        var clss, j, k, len, len1, ref, ref1, val;
        if (evt.which === 27) {
          closeBtn.click();
          return true;
        }
        val = searchBar.val();
        if ((val != null ? val.length : void 0) > 0) {
          closeBtn.fadeIn(100);
        } else {
          closeBtn.fadeOut(100);
        }
        if ((val != null ? val.length : void 0) > 2) {
          d3svg.select(".background").classed("searching", true);
          ref = self.classes;
          for (j = 0, len = ref.length; j < len; j++) {
            clss = ref[j];
            if (!clss.name.contains(val)) {
              clss.views["class"].element.classed("searching", true);
            }
          }
        } else {
          d3svg.select(".background").classed("searching", false);
          ref1 = self.classes;
          for (k = 0, len1 = ref1.length; k < len1; k++) {
            clss = ref1[k];
            clss.views["class"].element.classed("searching", false);
          }
        }
        return true;
      });
      closeBtn.click(function() {
        searchBar.val("").keyup();
        return true;
      });
      $(document.body).append(navbar).append(svg);
      this.classes = [];
    }

    UMLEditor.prototype.addClass = function(umlClass) {
      if (indexOf.call(this.classes, umlClass) < 0) {
        this.classes.push(umlClass);
      } else {
        throw new Error("Class with name '" + umlClass.name + "' already exists!");
      }
      return this;
    };

    UMLEditor.prototype.getClass = function(name) {
      var clss, j, len, ref;
      ref = this.classes;
      for (j = 0, len = ref.length; j < len; j++) {
        clss = ref[j];
        if (clss.name === name) {
          return clss;
        }
      }
      return null;
    };

    UMLEditor.prototype.draw = function() {
      var clss, g, initialScale, inner, j, len, ref, render, self, svg, zoom;
      self = this;
      g = new dagreD3.graphlib.Graph().setGraph({});
      ref = this.classes;
      for (j = 0, len = ref.length; j < len; j++) {
        clss = ref[j];
        g.setNode(clss.name, {
          shape: "umlClass",
          label: "",
          className: clss.name
        });
      }
      g.setEdge(this.classes.first.name, this.classes.second.name, {});
      svg = this.svg;
      inner = svg.select(".zoomer");
      zoom = d3.behavior.zoom().on("zoom", function() {
        inner.attr("transform", "translate(" + d3.event.translate + ") scale(" + d3.event.scale + ")");
        return true;
      });
      svg.call(zoom);
      render = new dagreD3.render();
      render.shapes().umlClass = function(parent, bbox, node) {
        var elem, h, points, w;
        elem = clss.views["class"].element;
        bbox = elem.node().getBBox();
        w = bbox.width;
        h = bbox.height;
        clss = self.getClass(node.className);
        points = [
          {
            x: 0,
            y: 0
          }, {
            x: w,
            y: 0
          }, {
            x: w,
            y: -h
          }, {
            x: 0,
            y: -h
          }
        ];
        elem.attr("transform", "translate(" + (-w * 0.5) + ", " + (-h * 0.5) + ")");
        node.intersect = function(point) {
          return dagreD3.intersect.polygon(node, points, point);
        };
        parent.append(function() {
          return elem.node();
        });
        return elem;
      };
      render(inner, g);
      initialScale = 0.75;
      zoom.translate([(svg.attr("width") - g.graph().width * initialScale) / 2, 20]).scale(initialScale).event(svg);
      return svg.attr('height', g.graph().height * initialScale + 40);
    };

    return UMLEditor;

  })();

  App.AbstractView = (function() {
    function AbstractView(model, container) {
      this.model = model;
      this.container = container;
    }

    AbstractView.appendDataToSVG = function(container, data) {
      var attrName, childData, element, j, len, ref, val;
      element = container.append(data.tag);
      for (attrName in data) {
        val = data[attrName];
        if (!(attrName !== "tag" && attrName !== "children")) {
          continue;
        }
        if (attrName === "class") {
          attrName = "classed";
        }
        if (attrName !== "classed") {
          (typeof element[attrName] === "function" ? element[attrName](val) : void 0) || element.attr(attrName, val);
        } else {
          element.classed(val, true);
        }
      }
      if (data.children != null) {
        ref = data.children;
        for (j = 0, len = ref.length; j < len; j++) {
          childData = ref[j];
          this.appendDataToSVG(element, childData);
        }
      }
      return container;
    };

    AbstractView.prototype.draw = function() {
      return this;
    };

    AbstractView.prototype.redraw = function(properties) {
      return this;
    };

    return AbstractView;

  })();

  App.UMLClass = (function() {
    function UMLClass(editor, name, attributes, methods, options) {
      var attribute, j, k, len, len1, method, ref, view;
      for (j = 0, len = attributes.length; j < len; j++) {
        attribute = attributes[j];
        if (!attribute.visibility) {
          attribute.visibility = "public";
        }
      }
      for (k = 0, len1 = methods.length; k < len1; k++) {
        method = methods[k];
        if (!method.visibility) {
          method.visibility = "public";
        }
        if (!method.parameters) {
          method.parameters = [];
        }
      }
      this.editor = editor;
      this.name = name;
      this.attributes = attributes;
      this.methods = methods;
      this.isAbstract = options.abstract || false;
      this.isInterface = options["interface"] || false;
      this.editor.addClass(this);
      this.views = {
        "class": new App.UMLClassView(this, d3.select("svg")),
        edit: new App.UMLClassEditView(this)
      };
      Object.defineProperty(this.views, "all", {
        enumerable: false,
        writable: false,
        value: ["class", "edit"]
      });
      ref = this.views;
      for (name in ref) {
        view = ref[name];
        view.draw();
      }
    }

    UMLClass.prototype.update = function(attributes, methods, options, viewsToUpdate) {
      var j, len, viewName;
      if (viewsToUpdate == null) {
        viewsToUpdate = this.views.all;
      }
      if (attributes != null) {
        this.attributes = attributes;
      }
      if (methods != null) {
        this.methods = methods;
      }
      this.isAbstract = options.isAbstract;
      this.isInterface = options.isInterface;
      for (j = 0, len = viewsToUpdate.length; j < len; j++) {
        viewName = viewsToUpdate[j];
        this.views[viewName].redraw();
      }
      return this;
    };

    UMLClass.prototype["delete"] = function() {
      var name, ref, view;
      ref = this.views;
      for (name in ref) {
        view = ref[name];
        view["delete"]();
      }
      this.editor.classes.remove(this);
      return null;
    };

    UMLClass.prototype.enterEditMode = function() {
      this.views.edit.show();
      return true;
    };

    UMLClass.prototype.exitEditMode = function() {
      this.views.edit.hide();
      return true;
    };

    return UMLClass;

  })();

  stringifyVisibility = function(visibility) {
    var mapper;
    if (visibility == null) {
      visibility = "public";
    }
    mapper = {
      "public": "+",
      "protected": "#",
      "package": "~",
      "private": "-"
    };
    return mapper[visibility.toLowerCase()];
  };

  stringifyParameters = function(parameters) {
    var j, len, param, res, suffix;
    if (!parameters || parameters.length === 0) {
      return "";
    }
    res = [];
    for (j = 0, len = parameters.length; j < len; j++) {
      param = parameters[j];
      if (param.type != null) {
        suffix = ": " + param.type;
      } else {
        suffix = "";
      }
      res.push("" + param.name + suffix);
    }
    return res.join(", ");
  };

  stringifyAttribute = function(attribute) {
    var suffix, visibility;
    visibility = attribute.visibility || "public";
    if (attribute.type != null) {
      suffix = ": " + attribute.type;
    } else {
      suffix = "";
    }
    return ((stringifyVisibility(visibility)) + " " + attribute.name + suffix).trim();
  };

  stringifyMethod = function(method) {
    var suffix;
    if (method.name != null) {
      if (method.type != null) {
        suffix = ": " + method.type;
      } else {
        suffix = "";
      }
      return ((stringifyVisibility(method.visibility)) + " " + method.name + "(" + (stringifyParameters(method.parameters)) + ")" + suffix).trim();
    }
    if (method[method.length - 1] === ")") {
      return "+ " + method;
    }
    return "+ " + method + "()";
  };

  calculateHeight = function(name, attributes, methods) {
    return (attributes.length + methods.length) * 14 + 35;
  };

  textWidthDummy = null;

  calculateWidth = function(name, stringifiedAttributes, stringifiedMethods, clss) {
    var attribute, j, k, len, len1, maxWidth, method, style, width;
    if (stringifiedAttributes == null) {
      stringifiedAttributes = "";
    }
    if (stringifiedMethods == null) {
      stringifiedMethods = "";
    }
    if (clss == null) {
      clss = "text";
    }
    style = {
      position: "absolute",
      visibility: "hidden"
    };
    if (textWidthDummy == null) {
      textWidthDummy = $("<div id='textWidthDummy' />");
      $(document.body).append(textWidthDummy);
    }
    textWidthDummy.css(style);
    if (clss != null) {
      textWidthDummy.addClass(clss);
    }
    maxWidth = 0;
    width = 0;
    textWidthDummy.text(name);
    if ((width = textWidthDummy.width()) > maxWidth) {
      maxWidth = width;
    }
    for (j = 0, len = stringifiedAttributes.length; j < len; j++) {
      attribute = stringifiedAttributes[j];
      textWidthDummy.text(attribute);
      if ((width = textWidthDummy.width()) > maxWidth) {
        maxWidth = width;
      }
    }
    for (k = 0, len1 = stringifiedMethods.length; k < len1; k++) {
      method = stringifiedMethods[k];
      textWidthDummy.text(method);
      if ((width = textWidthDummy.width()) > maxWidth) {
        maxWidth = width;
      }
    }
    return maxWidth + 10;
  };

  App.UMLClassView = (function(superClass) {
    extend(UMLClassView, superClass);

    function UMLClassView(model, container) {
      UMLClassView.__super__.constructor.call(this, model, container);
      this.element = null;
      this.id = this._getId();
      this.settings = {
        showVisibility: true,
        showTypes: true
      };
    }

    UMLClassView.prototype["delete"] = function() {
      this.element.remove();
      return null;
    };

    UMLClassView.prototype.adjustSize = function() {
      return this;
    };

    UMLClassView.prototype._getId = function() {
      return this.model.name._idSafe()._idUnique();
    };

    UMLClassView.prototype._createElements = function(container) {
      var data;
      data = {
        tag: "g",
        "class": "uml class",
        id: this.id,
        children: [
          {
            tag: "g",
            "class": "name part",
            children: [
              {
                tag: "rect",
                "class": "rect"
              }, {
                tag: "text",
                "class": "text",
                y: "1em",
                children: [
                  {
                    tag: "tspan",
                    "class": "keywords"
                  }, {
                    tag: "tspan",
                    "font-weight": "bold",
                    "class": "name",
                    dy: "1.2em"
                  }, {
                    tag: "tspan",
                    "class": "properties",
                    dy: "1.2em"
                  }
                ]
              }, {
                tag: "text",
                "class": "edit hidden",
                "font-family": "'Glyphicons Halflings'",
                "font-size": "13px",
                html: "\u270f",
                y: 16
              }
            ]
          }, {
            tag: "g",
            "class": "attributes part",
            children: [
              {
                tag: "rect",
                "class": "rect"
              }, {
                tag: "text",
                "class": "text",
                y: "1em"
              }
            ]
          }, {
            tag: "g",
            "class": "methods part",
            children: [
              {
                tag: "rect",
                "class": "rect"
              }, {
                tag: "text",
                "class": "text",
                y: "1em"
              }
            ]
          }, {
            tag: "g",
            "class": "overlayWrapper",
            children: [
              {
                tag: "rect",
                "class": "overlay"
              }, {
                tag: "text",
                "class": "text",
                y: "1em"
              }
            ]
          }
        ]
      };
      container = App.AbstractView.appendDataToSVG(container, data);
      return container.select("#" + this.id);
    };

    UMLClassView.prototype._bindEvents = function() {
      var element, self;
      self = this;
      element = this.element;
      this.element.on("mouseenter", function() {
        element.select(".edit").classed("hidden", false);
        return true;
      }).on("mouseleave", function() {
        element.select(".edit").classed("hidden", true);
        return true;
      });
      this.element.select(".edit").on("click", function() {
        self.model.enterEditMode();
        return true;
      });
      return this;
    };

    UMLClassView.prototype.draw = function(x, y) {
      var attribute, height, isAbstract, isInterface, lineHeight, lineSpacing, method, name, offset, stringifiedAttributes, stringifiedMethods, totalHeight, w;
      this.element = this._createElements(this.container);
      stringifiedAttributes = (function() {
        var j, len, ref, results;
        ref = this.model.attributes;
        results = [];
        for (j = 0, len = ref.length; j < len; j++) {
          attribute = ref[j];
          results.push(stringifyAttribute(attribute));
        }
        return results;
      }).call(this);
      stringifiedMethods = (function() {
        var j, len, ref, results;
        ref = this.model.methods;
        results = [];
        for (j = 0, len = ref.length; j < len; j++) {
          method = ref[j];
          results.push(stringifyMethod(method));
        }
        return results;
      }).call(this);
      name = this.model.name;
      w = calculateWidth(name, stringifiedAttributes, stringifiedMethods);
      totalHeight = 0;
      lineHeight = 18;
      lineSpacing = 3;
      offset = {
        left: 4,
        right: 0
      };
      w += offset.left + offset.right;
      y = 0;
      isInterface = this.model.isInterface;
      isAbstract = this.model.isAbstract;
      height = lineHeight * 3;
      totalHeight += height;
      this.element.selectAll(".part .rect").attr("width", w);
      this.element.select(".name .rect").attr("height", height);
      if (isInterface) {
        this.element.select(".name .text .keywords").text("<<interface>>").attr("x", (w - calculateWidth("<<interface>>")) / 2);
      }
      this.element.select(".name .text .name").text(name).attr("x", (w - calculateWidth(name)) / 2);
      if (isAbstract) {
        this.element.select(".name .text .properties").text("{abstract}").attr("x", (w - calculateWidth("{abstract}")) / 2);
      }
      this.element.select(".name .edit").attr("x", w - 19);
      y += height;
      height = this.model.attributes.length * (lineHeight + lineSpacing);
      totalHeight += height;
      this.element.select(".attributes").attr("transform", "translate(0, " + y + ")");
      this.element.select(".attributes .rect").attr("height", height);
      this.element.select(".attributes .text").selectAll("tspan").data((function() {
        var j, len, results;
        results = [];
        for (j = 0, len = stringifiedAttributes.length; j < len; j++) {
          attribute = stringifiedAttributes[j];
          results.push({
            text: attribute
          });
        }
        return results;
      })()).enter().append("tspan").text(function(d) {
        return d.text;
      }).attr("x", offset.left).attr("dy", function(d, i) {
        if (i > 0) {
          return lineHeight + lineSpacing;
        }
        return 0;
      });
      y += height;
      height = this.model.methods.length * (lineHeight + lineSpacing);
      totalHeight += height;
      this.element.select(".methods").attr("transform", "translate(0, " + y + ")");
      this.element.select(".methods .rect").attr("height", height);
      this.element.select(".methods .text").selectAll("tspan").data((function() {
        var j, len, results;
        results = [];
        for (j = 0, len = stringifiedMethods.length; j < len; j++) {
          method = stringifiedMethods[j];
          results.push({
            text: method
          });
        }
        return results;
      })()).enter().append("tspan").text(function(d) {
        return d.text;
      }).attr("x", offset.left).attr("dy", function(d, i) {
        if (i > 0) {
          return lineHeight + lineSpacing;
        }
        return 0;
      });
      this.element.select(".overlay").attr("width", w).attr("height", totalHeight);
      this.element.select(".overlayWrapper .text").text(name).attr("x", (w - calculateWidth(name)) / 2).attr("y", totalHeight / 2);
      this._bindEvents();
      return this;
    };

    UMLClassView.prototype.redraw = function(properties) {
      var translation, x, y;
      if (properties == null) {
        translation = d3.transform(this.element.attr("transform")).translate;
        x = translation[0];
        y = translation[1];
        this.element.remove();
        this.draw();
        this.element.attr("transform", "translate(" + x + ", " + y + ")");
        return this;
      }
      return this;
    };

    return UMLClassView;

  })(App.AbstractView);

  App.UMLClassEditView = (function(superClass) {
    extend(UMLClassEditView, superClass);

    function UMLClassEditView(model) {
      var self;
      UMLClassEditView.__super__.constructor.call(this, model);
      self = this;
      this.div = $("<div class=\"modal fade uml edit\">\n    <div class=\"modal-dialog\">\n        <div class=\"modal-content\">\n            <div class=\"modal-header\">\n                <button type=\"button\" class=\"close\" data-dismiss=\"modal\">\n                    <span>&times;</span>\n                </button>\n                <h3 class=\"modal-title\">\n                    Edit \"" + this.model.name + "\"\n                    <button type=\"button\" class=\"btn btn-danger deleteClass right hpadded\">Delete class</button>\n                </h3>\n            </div>\n            <div class=\"modal-body\">\n                <div class=\"general\">\n                    <h4>General options</h4>\n                    <form class=\"form-horizontal form-group\">\n                        <div class=\"row\">\n                            <div class=\"col-xs-4 col-xs-push-2\">\n                                <div class=\"input-group\">\n                                    <span class=\"input-group-addon\">\n                                        <input type=\"checkbox\" class=\"abstractCheckbox\"" + (model.isAbstract ? " checked" : "") + " />\n                                    </span>\n                                    <input type=\"text\" class=\"form-control\" readonly value=\"is abstract?\" />\n                                </div>\n                            </div>\n                            <div class=\"col-xs-4 col-xs-push-2\">\n                                <div class=\"input-group\">\n                                    <span class=\"input-group-addon\">\n                                        <input type=\"checkbox\" class=\"interfaceCheckbox\"" + (model.isInterface ? " checked" : "") + " />\n                                    </span>\n                                    <input type=\"text\" class=\"form-control\" readonly value=\"is interface?\" />\n                                </div>\n                            </div>\n                        </div>\n                    </form>\n                </div>\n                <div class=\"attributes\">\n                    <h4>Attributes</h4>\n                    <form class=\"form-horizontal\"></form>\n                    <div class=\"row\">\n                        <div class=\"col-xs-10 col-xs-push-2\">\n                            <button type=\"button\" class=\"btn btn-primary add\">Add attribute</button>\n                        </div>\n                    </div>\n                </div>\n                <hr />\n                <div class=\"methods\">\n                    <h4>Methods</h4>\n                    <form class=\"form-horizontal\"></form>\n                    <div class=\"row\">\n                        <div class=\"col-xs-10 col-xs-push-2\">\n                            <button type=\"button\" class=\"btn btn-primary add\">Add method</button>\n                        </div>\n                    </div>\n                </div>\n            </div>\n            <div class=\"modal-footer\">\n                <button type=\"button\" class=\"btn btn-danger cancel\" data-dismiss=\"modal\">Cancel</button>\n                <button type=\"button\" class=\"btn btn-default reset\">Reset</button>\n                <button type=\"button\" class=\"btn btn-primary btn-lg save\">Save changes</button>\n            </div>\n        </div>\n    </div>\n</div>");
      this.div.find("button.deleteClass").click(function() {
        if (confirm("Are you really sure you want to delete the class '" + self.model.name + "' and all of its incoming and outgoing dependencies?")) {
          self.div.modal("hide");
          self.div.on("hidden.bs.modal", function() {
            self.model["delete"]();
            return true;
          });
        }
        return true;
      });
      this.div.find("button.cancel").click(function() {
        self.draw();
        return true;
      });
      this.div.find("button.reset").click(function() {
        self.draw();
        return true;
      });
      this.div.find("button.save").click(function() {
        var data;
        data = self._getInput();
        self.model.update(data.attributes, data.methods, data.generalOptions);
        self.hide();
        return true;
      });
      this.div.find(".attributes .add").click(function() {
        self.div.find(".attributes form").append(self._createFormRow({
          name: "new attribute",
          type: "new type",
          visibility: "public"
        }, true));
        return true;
      });
      this.div.find(".methods .add").click(function() {
        self.div.find(".methods form").append(self._createFormRow({
          name: "new method",
          type: "new type",
          visibility: "public"
        }, false));
        return true;
      });
      $(document.body).append(this.div);
      this.hide();
    }

    UMLClassEditView.prototype["delete"] = function() {
      this.div.remove();
      return null;
    };

    UMLClassEditView.prototype._getInput = function() {
      var attributes, generalOptions, methods;
      generalOptions = {};
      attributes = [];
      methods = [];
      generalOptions.isAbstract = this.div.find(".general .abstractCheckbox").prop("checked");
      generalOptions.isInterface = this.div.find(".general .interfaceCheckbox").prop("checked");
      this.div.find(".attributes .form-group").each(function(elem, idx) {
        var formGroup;
        formGroup = $(this);
        attributes.push({
          name: formGroup.find(".name").val(),
          type: formGroup.find(".type").val(),
          visibility: formGroup.find(".visibility").val(),
          "default": formGroup.find(".nullCheckbox").prop("checked") ? null : formGroup.find(".default").val()
        });
        return true;
      });
      this.div.find(".methods .form-group").each(function() {
        var formGroup, parameters;
        formGroup = $(this);
        parameters = [];
        formGroup.find(".row.parameter").each(function() {
          var paramRow;
          paramRow = $(this);
          parameters.push({
            name: paramRow.find(".name").val(),
            type: paramRow.find(".type").val(),
            "default": paramRow.find(".nullCheckbox").prop("checked") ? null : paramRow.find(".default").val()
          });
          return true;
        });
        methods.push({
          name: formGroup.find(".name").val(),
          type: formGroup.find(".type").val(),
          visibility: formGroup.find(".visibility").val(),
          parameters: parameters
        });
        return true;
      });
      return {
        generalOptions: generalOptions,
        attributes: attributes,
        methods: methods
      };
    };

    UMLClassEditView.prototype._createParamRow = function(param) {
      return "<div class=\"row padded parameter\">\n    <div class=\"col-xs-3\">\n        <input type=\"text\" class=\"form-control name\" placeholder=\"parameter name\" value=\"" + param.name + "\" />\n    </div>\n    <div class=\"col-xs-3\">\n        <input type=\"text\" class=\"form-control type\" placeholder=\"parameter type\" value=\"" + param.type + "\" />\n    </div>\n    <div class=\"col-xs-2\">\n        <input type=\"text\" class=\"form-control default\" placeholder=\"default\" value=\"" + (param["default"] || "") + "\" data-current-value=\"" + (param["default"] || "") + "\" />\n    </div>\n    <div class=\"col-xs-3\">\n        <div class=\"input-group\">\n            <span class=\"input-group-addon\">\n                <input type=\"checkbox\" class=\"nullCheckbox\" />\n            </span>\n            <input type=\"text\" class=\"form-control\" readonly value=\"NULL\" />\n        </div>\n    </div>\n    <div class=\"col-xs-1\">\n        <button type=\"button\" class=\"close parameter hidden\" title=\"Remove parameter\">\n            <span>&times;</span>\n        </button>\n    </div>\n</div>";
    };

    UMLClassEditView.prototype._createFormParamList = function(method) {
      var j, len, param, ref, res;
      res = "<div class=\"row\">\n    <div class=\"col-xs-12\">\n        <label class=\"control-label\">Parameters</label>\n    </div>\n</div>";
      if (method.parameters != null) {
        ref = method.parameters;
        for (j = 0, len = ref.length; j < len; j++) {
          param = ref[j];
          res += this._createParamRow(param);
        }
      }
      res += "<div class=\"row\">\n    <div class=\"col-xs-12\">\n        <button type=\"button\" class=\"btn btn-primary btn-sm add parameter\">Add parameter</button>\n    </div>\n</div>";
      return res;
    };

    UMLClassEditView.prototype._createFormRow = function(property, isAttribute) {
      var div, id, self;
      if (isAttribute == null) {
        isAttribute = true;
      }
      self = this;
      id = ("id_" + (this.model.name._idSafe()) + "_" + (property.name._idSafe()))._idUnique();
      div = $("<div class=\"form-group\">\n  <div class=\"row padded\">\n      <label for=\"" + id + "\" class=\"col-xs-2 control-label\">" + property.name + "</label>\n      <div class=\"col-xs-8\">\n          <input type=\"text\" id=\"" + id + "\" class=\"form-control name\" placeholder=\"Name\" value=\"" + property.name + "\" />\n      </div>\n      <div class=\"col-xs-1\">\n          <button type=\"button\" class=\"close property hidden\" title=\"Remove property\">\n              <span>&times;</span>\n          </button>\n      </div>\n  </div>\n  <div class=\"row padded\">\n      <div class=\"col-xs-8 col-xs-push-2\">\n          <input type=\"text\" class=\"form-control type\" placeholder=\"Type\" value=\"" + property.type + "\" />\n      </div>\n  </div>\n  <div class=\"row padded\">\n      <div class=\"col-xs-8 col-xs-push-2\">\n          <select class=\"form-control visibility\">\n              <option value=\"public\"" + (property.visibility === "public" ? " selected" : "") + ">+ public</option>\n              <option value=\"private\"" + (property.visibility === "private" ? " selected" : "") + ">- private</option>\n              <option value=\"protected\"" + (property.visibility === "protected" ? " selected" : "") + "># protected</option>\n              <option value=\"package\"" + (property.visibility === "package" ? " selected" : "") + ">~ package</option>\n          </select>\n      </div>\n  </div>\n  " + (isAttribute ? "<div class=\"row padded\">\n    <div class=\"col-xs-4 col-xs-push-2\">\n        <input type=\"text\" class=\"form-control default\" placeholder=\"Default value (optional)\" value=\"" + (property["default"] || "") + "\" data-current-value=\"" + (property["default"] || "") + "\" />\n    </div>\n    <div class=\"col-xs-4 col-xs-push-2\">\n        <div class=\"input-group\">\n            <span class=\"input-group-addon\">\n                <input type=\"checkbox\" class=\"nullCheckbox\"" + (property["default"] != null ? "" : " checked") + " />\n            </span>\n            <input type=\"text\" class=\"form-control\" readonly value=\"NULL\" />\n        </div>\n    </div>\n</div>" : "<div class=\"row padded\">\n    <div class=\"col-xs-8 col-xs-push-2\">\n        " + (this._createFormParamList(property)) + "\n    </div>\n</div>") + "\n</div>");
      div.find("#" + id).blur(function() {
        var input;
        input = $(this);
        input.parent().siblings("label").text(input.val());
        return true;
      });
      div.find(".close.hidden.property").click(function() {
        if (confirm("Remove '" + property.name + "'?")) {
          div.remove();
        }
        return true;
      });
      div.find(".nullCheckbox").change(function() {
        var box, input;
        box = $(this);
        input = box.closest(".row").find(".default");
        if (box.is(":checked")) {
          input.attr("data-current-value", input.val());
          input.val("");
        } else {
          input.val(input.attr("data-current-value"));
        }
        return true;
      });
      div.find(".add.parameter").click(function() {
        $(this).closest(".row").before(self._createParamRow({
          name: "",
          type: "",
          "default": null
        }));
        return true;
      });
      div.find(".close.hidden.parameter").click(function() {
        $(this).closest(".row").remove();
        return true;
      });
      return div;
    };

    UMLClassEditView.prototype.draw = function() {
      var attribute, body, j, k, len, len1, method, ref, ref1;
      this.div.find(".general .abstractCheckbox").prop("checked", this.model.isAbstract);
      this.div.find(".general .interfaceCheckbox").prop("checked", this.model.isInterface);
      body = this.div.find(".modal-body .attributes form").empty();
      ref = this.model.attributes;
      for (j = 0, len = ref.length; j < len; j++) {
        attribute = ref[j];
        body.append(this._createFormRow(attribute, true));
      }
      body = this.div.find(".modal-body .methods form").empty();
      ref1 = this.model.methods;
      for (k = 0, len1 = ref1.length; k < len1; k++) {
        method = ref1[k];
        body.append(this._createFormRow(method, false));
      }
      return this;
    };

    UMLClassEditView.prototype.redraw = function() {
      return this.draw();
    };

    UMLClassEditView.prototype.show = function() {
      this.div.modal("show");
      return this;
    };

    UMLClassEditView.prototype.hide = function() {
      this.div.modal("hide");
      return this;
    };

    return UMLClassEditView;

  })(App.AbstractView);

}).call(this);
